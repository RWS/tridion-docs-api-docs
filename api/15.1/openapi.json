{
  "openapi": "3.0.1",
  "info": {
    "title": "Tridion Docs API v3.0",
    "version": "v3.0"
  },
  "schemes": ["http"],
  "paths": {
    "/Application/Version": {
      "get": {
        "tags": ["Application"],
        "summary": "Gets the version of the application server.",
        "operationId": "GetApplicationVersion",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v3/BackgroundTasks": {
      "post": {
        "tags": ["BackgroundTasks"],
        "summary": "Creates a new background task.",
        "operationId": "CreateBackgroundTask",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["metadata"],
                "type": "object",
                "properties": {
                  "inputData": {
                    "type": "string",
                    "format": "binary",
                    "nullable": true
                  },
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreateBackgroundTask"
                      }
                    ]
                  }
                }
              },
              "encoding": {
                "inputData": {
                  "style": "form"
                },
                "metadata": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundTask"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundTask"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/BackgroundTasks/{Id}": {
      "get": {
        "tags": ["BackgroundTasks"],
        "summary": "Gets background task. - NOT IMPLEMENTED.",
        "operationId": "GetBackgroundTask",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundTask"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundTask"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Baselines/Get": {
      "post": {
        "tags": ["Baselines"],
        "summary": "Gets all baselines in the repository that match the criteria given in the parameters.",
        "operationId": "GetBaselineList",
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetBaselineList"
                  }
                ],
                "description": "Request object to get all baselines in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetBaselineList"
                  }
                ],
                "description": "Request object to get all baselines in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetBaselineList"
                  }
                ],
                "description": "Request object to get all baselines in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Baseline"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Baseline"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Baselines/{Id}/Report/Complete": {
      "post": {
        "tags": ["Baselines"],
        "summary": "Expands and completes the baseline starting from the incoming logicalIds using the extend baseline and/or the autocomplete mode.",
        "operationId": "CompleteBaseline",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the baseline.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "The identifier of the baseline."
            }
          }
        ],
        "requestBody": {
          "description": "Parameters which will be used to expand and complete the baseline starting from the incoming logicalIds using the extend baseline and/or the autocomplete mode.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CompleteBaseline"
                  }
                ],
                "description": "The model contains the parameters which will be used to expand and complete the baseline starting from the incoming logicalIds using the extend baseline and/or the autocomplete mode."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CompleteBaseline"
                  }
                ],
                "description": "The model contains the parameters which will be used to expand and complete the baseline starting from the incoming logicalIds using the extend baseline and/or the autocomplete mode."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CompleteBaseline"
                  }
                ],
                "description": "The model contains the parameters which will be used to expand and complete the baseline starting from the incoming logicalIds using the extend baseline and/or the autocomplete mode."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaselineReportEntry"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaselineReportEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Baselines/{Id}/Report/Expand": {
      "post": {
        "tags": ["Baselines"],
        "summary": "Expands baseline reports in the repository that match the criteria given in the parameters.",
        "operationId": "ExpandBaseline",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the baseline.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "The identifier of the baseline."
            }
          }
        ],
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpandBaseline"
                  }
                ],
                "description": "Represents a ExpandBaseline."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpandBaseline"
                  }
                ],
                "description": "Represents a ExpandBaseline."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpandBaseline"
                  }
                ],
                "description": "Represents a ExpandBaseline."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaselineReportEntry"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaselineReportEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/ByLogicalId/Get": {
      "post": {
        "tags": ["DocumentObjects"],
        "summary": "Gets all document objects in the Repository that match the criteria given in the parameters.",
        "description": "Depending on which status filter is specified, the objects with following status types can be returned:\r\n<table class=\"table\"><thead><tr><th>Status filter</th><th>Returned status types</th></tr></thead><tbody><tr><td>All</td><td>All status types</td></tr><tr><td>LatestReleased</td><td>Latest released excluding out-of-date</td></tr><tr><td>DraftOrLatestReleased</td><td>Draft and latest released excluding out-of-date</td></tr><tr><td>AllReleased</td><td>All released including out-of-date</td></tr></tbody></table>",
        "operationId": "GetDocumentObjectListByLogicalId",
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetDocumentObjectListByLogicalId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetDocumentObjectListByLogicalId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetDocumentObjectListByLogicalId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentObject"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentObject"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/Get": {
      "post": {
        "tags": ["DocumentObjects"],
        "summary": "Gets all document objects in the Repository that match the criteria given in the parameters.",
        "description": "Depending on which status filter is specified, the objects with following status types can be returned:\r\n<table class=\"table\"><thead><tr><th>Status filter</th><th>Returned status types</th></tr></thead><tbody><tr><td>All</td><td>All status types</td></tr><tr><td>LatestReleased</td><td>Latest released excluding out-of-date</td></tr><tr><td>DraftOrLatestReleased</td><td>Draft and latest released excluding out-of-date</td></tr><tr><td>AllReleased</td><td>All released including out-of-date</td></tr></tbody></table>",
        "operationId": "GetDocumentObjectList",
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetDocumentObjectList"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetDocumentObjectList"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetDocumentObjectList"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentObject"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentObject"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/ByLanguageCardId/Get": {
      "post": {
        "tags": ["DocumentObjects"],
        "summary": "Gets all document objects in the Repository that match the criteria given in the parameters.",
        "description": "Depending on which status filter is specified, the objects with following status types can be returned:\r\n<table class=\"table\"><thead><tr><th>Status filter</th><th>Returned status types</th></tr></thead><tbody><tr><td>All</td><td>All status types</td></tr><tr><td>LatestReleased</td><td>Latest released excluding out-of-date</td></tr><tr><td>DraftOrLatestReleased</td><td>Draft and latest released excluding out-of-date</td></tr><tr><td>AllReleased</td><td>All released including out-of-date</td></tr></tbody></table>",
        "operationId": "GetDocumentObjectListByLanguageCardId",
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetDocumentObjectListByLanguageCardId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetDocumentObjectListByLanguageCardId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetDocumentObjectListByLanguageCardId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentObject"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentObject"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/ByLogicalId/{LogicalId}": {
      "get": {
        "tags": ["DocumentObjects"],
        "summary": "Gets the metadata of the document object specified by the logical identifier, version and language.",
        "operationId": "GetDocumentObjectByLogicalId",
        "parameters": [
          {
            "name": "LogicalId",
            "in": "path",
            "description": "The logical identifier of the document object.",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "The logical identifier of the document object."
            }
          },
          {
            "name": "Version",
            "in": "query",
            "description": "The version of the document object.",
            "schema": {
              "type": "string",
              "description": "The version of the document object.",
              "nullable": true
            }
          },
          {
            "name": "Language",
            "in": "query",
            "description": "The language of the document object.",
            "schema": {
              "maxLength": 255,
              "type": "string",
              "description": "The language of the document object.",
              "nullable": true
            }
          },
          {
            "name": "Resolution",
            "in": "query",
            "description": "The resolution of the document object.",
            "schema": {
              "maxLength": 255,
              "type": "string",
              "description": "The resolution of the document object.",
              "nullable": true
            }
          },
          {
            "name": "SelectedProperties",
            "in": "query",
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
              "default": "id"
            }
          },
          {
            "name": "FieldGroup",
            "in": "query",
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
              "default": "none"
            }
          },
          {
            "name": "Field",
            "in": "query",
            "description": "Specifies one or more metadata fields to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies one or more metadata fields to return."
            }
          },
          {
            "name": "IncludeLinks",
            "in": "query",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "schema": {
              "type": "boolean",
              "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentObject"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentObject"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["DocumentObjects"],
        "summary": "Updates the document object by the logical identifier, version, language and resolution.",
        "operationId": "UpdateDocumentObjectByLogicalId",
        "parameters": [
          {
            "name": "LogicalId",
            "in": "path",
            "description": "The logical identifier of the document object.",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "The logical identifier of the document object."
            }
          },
          {
            "name": "Version",
            "in": "query",
            "description": "The version of the document object.",
            "schema": {
              "type": "string",
              "description": "The version of the document object.",
              "nullable": true
            }
          },
          {
            "name": "Language",
            "in": "query",
            "description": "The language of the document object.",
            "schema": {
              "maxLength": 255,
              "type": "string",
              "description": "The language of the document object.",
              "nullable": true
            }
          },
          {
            "name": "Resolution",
            "in": "query",
            "description": "The resolution of the document object.",
            "schema": {
              "maxLength": 255,
              "type": "string",
              "description": "The resolution of the document object.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateDocumentObject"
                  }
                ],
                "description": "Represents a document."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateDocumentObject"
                  }
                ],
                "description": "Represents a document."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateDocumentObject"
                  }
                ],
                "description": "Represents a document."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["DocumentObjects"],
        "summary": "Deletes a document object by its logical identifier.",
        "operationId": "DeleteDocumentObjectByLogicalId",
        "parameters": [
          {
            "name": "LogicalId",
            "in": "path",
            "description": "The logical identifier of the document object.",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "The logical identifier of the document object."
            }
          },
          {
            "name": "Version",
            "in": "query",
            "description": "The version of the document object.",
            "schema": {
              "type": "string",
              "description": "The version of the document object.",
              "nullable": true
            }
          },
          {
            "name": "Language",
            "in": "query",
            "description": "The language of the document object.",
            "schema": {
              "maxLength": 255,
              "type": "string",
              "description": "The language of the document object.",
              "nullable": true
            }
          },
          {
            "name": "Resolution",
            "in": "query",
            "description": "The resolution of the document object.",
            "schema": {
              "maxLength": 255,
              "type": "string",
              "description": "The resolution of the document object.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The parameters that will be used for delete operation.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteDocumentObjectByLogicalId"
                  }
                ],
                "description": "Request object to delete document object."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteDocumentObjectByLogicalId"
                  }
                ],
                "description": "Request object to delete document object."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteDocumentObjectByLogicalId"
                  }
                ],
                "description": "Request object to delete document object."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/ByLanguageCardId/{LanguageCardId}": {
      "get": {
        "tags": ["DocumentObjects"],
        "summary": "Gets the metadata of the document object by its language card identifier.",
        "operationId": "GetDocumentObjectByLanguageCardId",
        "parameters": [
          {
            "name": "LanguageCardId",
            "in": "path",
            "description": "The language card identifier of the document object.",
            "required": true,
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "description": "The language card identifier of the document object.",
              "format": "int64"
            }
          },
          {
            "name": "SelectedProperties",
            "in": "query",
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
              "default": "id"
            }
          },
          {
            "name": "FieldGroup",
            "in": "query",
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
              "default": "none"
            }
          },
          {
            "name": "Field",
            "in": "query",
            "description": "Specifies one or more metadata fields to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies one or more metadata fields to return."
            }
          },
          {
            "name": "IncludeLinks",
            "in": "query",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "schema": {
              "type": "boolean",
              "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentObject"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentObject"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["DocumentObjects"],
        "summary": "Updates the document object by the language card identifier.",
        "operationId": "UpdateDocumentObjectByLanguageCardId",
        "parameters": [
          {
            "name": "LanguageCardId",
            "in": "path",
            "description": "The language card identifier of the document object.",
            "required": true,
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "description": "The language card identifier of the document object.",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateDocumentObject"
                  }
                ],
                "description": "Represents a document."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateDocumentObject"
                  }
                ],
                "description": "Represents a document."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateDocumentObject"
                  }
                ],
                "description": "Represents a document."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["DocumentObjects"],
        "summary": "Deletes a document object by its language card identifier.",
        "operationId": "DeleteDocumentObjectByLanguageCardId",
        "parameters": [
          {
            "name": "LanguageCardId",
            "in": "path",
            "description": "The language card identifier of the document object.",
            "required": true,
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "description": "The language card identifier of the document object.",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The parameters that will be used for delete operation.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteDocumentObjectByLanguageCardId"
                  }
                ],
                "description": "Request object to delete document object."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteDocumentObjectByLanguageCardId"
                  }
                ],
                "description": "Request object to delete document object."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteDocumentObjectByLanguageCardId"
                  }
                ],
                "description": "Request object to delete document object."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/ByLanguageCardId/{LanguageCardId}/Content": {
      "get": {
        "tags": ["DocumentObjects"],
        "summary": "Gets the content by its language card identifier.",
        "operationId": "GetDocumentObjectContentByLanguageCardId",
        "parameters": [
          {
            "name": "LanguageCardId",
            "in": "path",
            "description": "The language card identifier of the document object.",
            "required": true,
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "description": "The language card identifier of the document object.",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["DocumentObjects"],
        "summary": "Updates the document object content by its language card identifier.",
        "operationId": "UpdateDocumentObjectContentByLanguageCardId",
        "parameters": [
          {
            "name": "LanguageCardId",
            "in": "path",
            "description": "The language card identifier of the document object.",
            "required": true,
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "description": "The language card identifier of the document object.",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["content"],
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "format": "binary"
                  },
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateDocumentObjectContent"
                      }
                    ],
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "content": {
                  "style": "form"
                },
                "metadata": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/ByLanguageCardId/{LanguageCardId}/PossibleTargetStatuses": {
      "get": {
        "tags": ["DocumentObjects"],
        "summary": "Getting status (transition) list by language card identifier.",
        "operationId": "GetDocumentObjectPossibleTargetStatusListByLanguageCardId",
        "parameters": [
          {
            "name": "LanguageCardId",
            "in": "path",
            "description": "The language card identifier of the document object.",
            "required": true,
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "description": "The language card identifier of the document object.",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LovValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LovValue"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/PossibleTargetStatuses": {
      "get": {
        "tags": ["DocumentObjects"],
        "summary": "Getting status (initial) list by document object type.",
        "operationId": "GetDocumentObjectPossibleTargetStatusList",
        "parameters": [
          {
            "name": "ObjectType",
            "in": "query",
            "description": "Type of the document.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DocumentObjectTypeFilter"
                }
              ],
              "default": "any"
            }
          },
          {
            "name": "ActivityFilter",
            "in": "query",
            "description": "Filter of activity that limits the possible target statuses to only the active or inactive ones. If not supplied, only the active ones will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ActivityFilter"
                }
              ],
              "default": "active"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LovValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LovValue"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects": {
      "post": {
        "tags": ["DocumentObjects"],
        "summary": "Creates document object. - NOT IMPLEMENTED.",
        "operationId": "CreateDocumentObject",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentObject"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentObject"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/ByLanguageCardId/{LanguageCardId}/Content/CheckOut": {
      "post": {
        "tags": ["DocumentObjects"],
        "summary": "Check out the document object by its language card identifier.",
        "operationId": "CheckOutDocumentObjectByLanguageCardId",
        "parameters": [
          {
            "name": "LanguageCardId",
            "in": "path",
            "description": "The language card identifier of the document object.",
            "required": true,
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "description": "The language card identifier of the document object.",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CheckOutDocumentObject"
                  }
                ],
                "description": "Represents model to check out a document"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CheckOutDocumentObject"
                  }
                ],
                "description": "Represents model to check out a document"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CheckOutDocumentObject"
                  }
                ],
                "description": "Represents model to check out a document"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/ByLanguageCardId/{LanguageCardId}/Content/CheckIn": {
      "post": {
        "tags": ["DocumentObjects"],
        "summary": "Checks in the document object specified by the language card identifier.",
        "operationId": "CheckInDocumentObjectByLanguageCardId",
        "parameters": [
          {
            "name": "LanguageCardId",
            "in": "path",
            "description": "The language card identifier of the document object.",
            "required": true,
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "description": "The language card identifier of the document object.",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["content"],
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "format": "binary"
                  },
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CheckInDocumentObject"
                      }
                    ],
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "content": {
                  "style": "form"
                },
                "metadata": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/ByLanguageCardId/{LanguageCardId}/Content/UndoCheckout": {
      "post": {
        "tags": ["DocumentObjects"],
        "summary": "Undo checkout of the document object by its language card identifier.",
        "operationId": "UndoCheckoutDocumentObjectByLanguageCardId",
        "parameters": [
          {
            "name": "LanguageCardId",
            "in": "path",
            "description": "The language card identifier of the document object.",
            "required": true,
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "description": "The language card identifier of the document object.",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Required current metadata of the object.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UndoCheckoutDocumentObject"
                  }
                ],
                "description": "Represents model to undo checkout of a document"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UndoCheckoutDocumentObject"
                  }
                ],
                "description": "Represents model to undo checkout of a document"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UndoCheckoutDocumentObject"
                  }
                ],
                "description": "Represents model to undo checkout of a document"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/ByLogicalId/{LogicalId}/Location": {
      "get": {
        "tags": ["DocumentObjects"],
        "summary": "Get the location of a document object in the folder structure.",
        "operationId": "GetDocumentObjectLocation",
        "parameters": [
          {
            "name": "LogicalId",
            "in": "path",
            "description": "The logical identifier of the document object.",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "The logical identifier of the document object."
            }
          },
          {
            "name": "SelectedProperties",
            "in": "query",
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
              "default": "id"
            }
          },
          {
            "name": "FieldGroup",
            "in": "query",
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
              "default": "none"
            }
          },
          {
            "name": "Field",
            "in": "query",
            "description": "Specifies one or more metadata fields to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies one or more metadata fields to return."
            }
          },
          {
            "name": "IncludeLinks",
            "in": "query",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "schema": {
              "type": "boolean",
              "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/Versions": {
      "post": {
        "tags": ["DocumentObjects"],
        "summary": "Creates document object version. - NOT IMPLEMENTED",
        "operationId": "CreateDocumentObjectVersion",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/Languages": {
      "post": {
        "tags": ["DocumentObjects"],
        "summary": "Creates document object language. - NOT IMPLEMENTED.",
        "operationId": "CreateDocumentObjectLanguage",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/ByLogicalId/{LogicalId}/ByVersion/{Version}/UsedInPublications/Get": {
      "post": {
        "tags": ["DocumentObjects"],
        "summary": "Gets the list of publications that are referencing the document object specified by the logical identifier and version.",
        "operationId": "GetPublicationListUsingDocumentObject",
        "parameters": [
          {
            "name": "LogicalId",
            "in": "path",
            "description": "The logical identifier of the referenced document object.",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "The logical identifier of the referenced document object."
            }
          },
          {
            "name": "Version",
            "in": "path",
            "description": "The version of the referenced document object.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "description": "The version of the referenced document object."
            }
          }
        ],
        "requestBody": {
          "description": "Request body to get all publications in the Repository that are referencing the document object specified by the logical identifier and version.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetPublicationListUsingDocumentObject"
                  }
                ],
                "description": "Request body to get all publications in the Repository that are referencing a document object specified by the logical identifier and version."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetPublicationListUsingDocumentObject"
                  }
                ],
                "description": "Request body to get all publications in the Repository that are referencing a document object specified by the logical identifier and version."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetPublicationListUsingDocumentObject"
                  }
                ],
                "description": "Request body to get all publications in the Repository that are referencing a document object specified by the logical identifier and version."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Publication"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Publication"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/ByLogicalId/{LogicalId}/UsedInDocumentObjects/Get": {
      "post": {
        "tags": ["DocumentObjects"],
        "summary": "Gets the list of document objects that are referencing the document object specified by the logical identifier.",
        "operationId": "GetDocumentObjectListUsingDocumentObject",
        "parameters": [
          {
            "name": "LogicalId",
            "in": "path",
            "description": "The logical identifier of the referenced document object.",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "The logical identifier of the referenced document object."
            }
          }
        ],
        "requestBody": {
          "description": "Request body to get all document objects in the Repository that are referencing the document object specified by the logical identifier.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetDocumentObjectListUsingDocumentObject"
                  }
                ],
                "description": "Request object to get all objects in the repository that are referencing the given logical id."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetDocumentObjectListUsingDocumentObject"
                  }
                ],
                "description": "Request object to get all objects in the repository that are referencing the given logical id."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetDocumentObjectListUsingDocumentObject"
                  }
                ],
                "description": "Request object to get all objects in the repository that are referencing the given logical id."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentObject"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentObject"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/ByLanguageCardId/{LanguageCardId}/References": {
      "get": {
        "tags": ["DocumentObjects"],
        "summary": "Get the logical identifiers for all document objects referenced by the specified document object.",
        "operationId": "GetDocumentObjectReferenceListByLanguageCardId",
        "parameters": [
          {
            "name": "LanguageCardId",
            "in": "path",
            "description": "The language card identifier of the document object.",
            "required": true,
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "description": "The language card identifier of the document object.",
              "format": "int64"
            }
          },
          {
            "name": "LinkType",
            "in": "query",
            "description": "The enumeration indicating which link fields must be used.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LinkType"
                }
              ],
              "description": "The enumeration indicating which link fields must be used.",
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/ByLanguageCardId/{LanguageCardId}/SmartTags/Get": {
      "post": {
        "tags": ["DocumentObjects"],
        "summary": "Gets the smart tags of a document object specified by the language card identifier.",
        "operationId": "GetDocumentObjectSmartTagListByLanguageCardId",
        "parameters": [
          {
            "name": "LanguageCardId",
            "in": "path",
            "description": "The language card identifier of the document object.",
            "required": true,
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "description": "The language card identifier of the document object.",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Request body holding information such as requested fields and their current values.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetDocumentObjectSmartTagsByLanguageCardId"
                  }
                ],
                "description": "Request parameters to get smart tags of an object."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetDocumentObjectSmartTagsByLanguageCardId"
                  }
                ],
                "description": "Request parameters to get smart tags of an object."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetDocumentObjectSmartTagsByLanguageCardId"
                  }
                ],
                "description": "Request parameters to get smart tags of an object."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldTag"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldTag"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/DocumentObjects/ByLanguageCardId/BackgroundTasks": {
      "post": {
        "tags": ["DocumentObjects"],
        "summary": "Creates a background task with given event type and language card identifiers.",
        "operationId": "CreateBackgroundTaskForDocumentObjectByLanguageCardId",
        "requestBody": {
          "description": "Parameters holding information such as even type and language card identifiers.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateBackgroundTaskForDocumentObjectByLanguageCardId"
                  }
                ],
                "description": "Request object to create background task for language card identifiers."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateBackgroundTaskForDocumentObjectByLanguageCardId"
                  }
                ],
                "description": "Request object to create background task for language card identifiers."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateBackgroundTaskForDocumentObjectByLanguageCardId"
                  }
                ],
                "description": "Request object to create background task for language card identifiers."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundTask"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundTask"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Events": {
      "post": {
        "tags": ["Events"],
        "summary": "Creates a new event.",
        "operationId": "CreateEvent",
        "requestBody": {
          "description": "The create event model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateEvent"
                  }
                ],
                "description": "Represents a create event model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateEvent"
                  }
                ],
                "description": "Represents a create event model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateEvent"
                  }
                ],
                "description": "Represents a create event model."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventProgress"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventProgress"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Events/ByProgressId/{ProgressId}": {
      "delete": {
        "tags": ["Events"],
        "summary": "Deletes an event.",
        "operationId": "DeleteEvent",
        "parameters": [
          {
            "name": "ProgressId",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The delete event model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteEvent"
                  }
                ],
                "description": "Represents a delete event model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteEvent"
                  }
                ],
                "description": "Represents a delete event model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteEvent"
                  }
                ],
                "description": "Represents a delete event model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Events"],
        "summary": "Get an event - NOT IMPLEMENTED.",
        "operationId": "GetEventByProgressId",
        "parameters": [
          {
            "name": "ProgressId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventProgress"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventProgress"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Events/ByProgressId/{ProgressId}/Terminate": {
      "post": {
        "tags": ["Events"],
        "summary": "Terminates an event.",
        "operationId": "TerminateEvent",
        "parameters": [
          {
            "name": "ProgressId",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The terminate event model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TerminateEvent"
                  }
                ],
                "description": "Represents a terminate event model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TerminateEvent"
                  }
                ],
                "description": "Represents a terminate event model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TerminateEvent"
                  }
                ],
                "description": "Represents a terminate event model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Events/ByProgressId/Get": {
      "post": {
        "tags": ["Events"],
        "summary": "Gets all events in the Repository that match the criteria given in the parameters.",
        "operationId": "GetEventListByProgressId",
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetEventListByProgressId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetEventListByProgressId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetEventListByProgressId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventProgress"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventProgress"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Events/ByParentProgressId/Get": {
      "post": {
        "tags": ["Events"],
        "summary": "Gets all events in the Repository that match the criteria given in the parameters.",
        "operationId": "GetEventListByParentProgressId",
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetEventListByParentProgressId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetEventListByParentProgressId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetEventListByParentProgressId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventProgress"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventProgress"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Events/Details": {
      "post": {
        "tags": ["Events"],
        "summary": "Creates a new event detail with its content.",
        "operationId": "CreateEventDetail",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "format": "binary",
                    "nullable": true
                  },
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreateEventDetail"
                      }
                    ],
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "content": {
                  "style": "form"
                },
                "metadata": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventProgress"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventProgress"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Events/Overview/Get": {
      "post": {
        "tags": ["Events"],
        "summary": "Gets a list of events matching the supplied filters.",
        "operationId": "GetEventOverview",
        "requestBody": {
          "description": "The event overview model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetEventOverview"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetEventOverview"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetEventOverview"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventProgress"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventProgress"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Events/ByProgressId/Overview/Get": {
      "post": {
        "tags": ["Events"],
        "summary": "Gets a list of events matching the supplied filters.",
        "operationId": "GetEventByProgressIdOverview",
        "requestBody": {
          "description": "The event overview by progressId model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetEventOverviewByProgressId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetEventOverviewByProgressId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetEventOverviewByProgressId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventProgress"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventProgress"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Events/ByDetailId/{detailId}": {
      "get": {
        "tags": ["Events"],
        "summary": "Gets an event by the provided unique identifier of an event action/detail.",
        "operationId": "GetEventByDetailId",
        "parameters": [
          {
            "name": "detailId",
            "in": "path",
            "description": "The unique identifier of an event action/detail.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fieldGroup",
            "in": "query",
            "description": "FieldGroup allows to add a group of fields to the requested metadata.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Groups of metadata fields."
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "The list with the requested fields of the Event to be returned.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includeLinks",
            "in": "query",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventProgress"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventProgress"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Events/ByEventId/{eventId}": {
      "get": {
        "tags": ["Events"],
        "summary": "Gets an event progress identifier by the provided unique identifier of an event.",
        "operationId": "GetEventByEventId",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The unique identifier of an event.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventProgress"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventProgress"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Events/ByDetailId/{detailId}/Content": {
      "get": {
        "tags": ["Events"],
        "summary": "Gets an event content by the provided unique identifier of an event action/detail.",
        "operationId": "GetEventContentByDetailId",
        "parameters": [
          {
            "name": "detailId",
            "in": "path",
            "description": "The unique identifier of an event action/detail.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Folders/RootFolders": {
      "get": {
        "tags": ["Folders"],
        "summary": "Gets the root folders of types like Data, System, Favorites.",
        "operationId": "GetRootFolderList",
        "parameters": [
          {
            "name": "selectedProperties",
            "in": "query",
            "description": "Selected properties to filter the properties. Default is Id.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Enumeration holding the selected properties."
            }
          },
          {
            "name": "fieldGroup",
            "in": "query",
            "description": "Field group of Metadata fields. Default is None.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Groups of metadata fields."
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "Specifies one or more metadata fields to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includeLinks",
            "in": "query",
            "description": "`true` to include the links; otherwise, `false`. Default is `false`.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Folders/{id}/Objects": {
      "get": {
        "tags": ["Folders"],
        "summary": "Gets the objects in the folder specified by id.",
        "description": "Depending on which object type is specified, the following types can be returned:\r\n<table class=\"table\"><thead><tr><th>Object type</th><th>Returned types</th></tr></thead><tbody><tr><td>Any</td><td>Folders and contents</td></tr><tr><td>Folders</td><td>Folder, ReferenceFolder, PublicationFolder, MapFolder, TopicFolder, LibraryFolder, IllustrationFolder and OtherFolder</td></tr><tr><td>Contents</td><td>Publication, Map, Topic, Library, Illustration and Other</td></tr></tbody></table>",
        "operationId": "GetFolderObjectList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Card identifier of the folder whose objects will be returned, e.g. 25432.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "objectType",
            "in": "query",
            "description": "Specifies whether folders, contents or both will be returned. If not supplied, all types will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FolderObjectTypeFilter"
                }
              ],
              "description": "Enumeration that lists possible folder item types."
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "The language for which to retrieve document metadata fields, e.g. <tt>VLANGUAGEEN</tt>, <tt>en</tt>. If not supplied, the user language will be used.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resolution",
            "in": "query",
            "description": "The resolution for which to retrieve image metadata fields, e.g. <tt>VRESLOW</tt>, <tt>Low</tt>. If not supplied, the system resolution will be used.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "selectedProperties",
            "in": "query",
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Enumeration holding the selected properties."
            }
          },
          {
            "name": "fieldGroup",
            "in": "query",
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Groups of metadata fields."
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "Specifies one or more metadata fields to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includeLinks",
            "in": "query",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includePartialItems",
            "in": "query",
            "description": "<tt>true</tt> to include partial items when the version or language is missing; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseObject"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseObject"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Folders/{id}": {
      "delete": {
        "tags": ["Folders"],
        "summary": "Deletes a folder.",
        "operationId": "DeleteFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the folder to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Folders"],
        "summary": "Gets the properties of the given folder.",
        "operationId": "GetFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the folder.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "selectedProperties",
            "in": "query",
            "description": "Specifies which properties to return.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Enumeration holding the selected properties."
            }
          },
          {
            "name": "fieldGroup",
            "in": "query",
            "description": "Specifies the group of metadata fields to return.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Groups of metadata fields."
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "Specifies one or more metadata fields to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includeLinks",
            "in": "query",
            "description": "`true` to include the links; otherwise, `false`. Default is `false`.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Folders"],
        "summary": "Updates the folder specified by id.",
        "operationId": "UpdateFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of folder.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The update folder model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateFolder"
                  }
                ],
                "description": "Represents an update folder model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateFolder"
                  }
                ],
                "description": "Represents an update folder model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateFolder"
                  }
                ],
                "description": "Represents an update folder model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Folders": {
      "post": {
        "tags": ["Folders"],
        "summary": "Creates the new folder in the specified parent folder.",
        "operationId": "CreateFolder",
        "requestBody": {
          "description": "The create folder model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateFolder"
                  }
                ],
                "description": "Represents a create folder model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateFolder"
                  }
                ],
                "description": "Represents a create folder model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateFolder"
                  }
                ],
                "description": "Represents a create folder model."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDescriptor"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDescriptor"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Folders/Get": {
      "post": {
        "tags": ["Folders"],
        "summary": "Gets all folders in the Repository that match the criteria given in the parameters.",
        "operationId": "GetFolderList",
        "requestBody": {
          "description": "Request folders with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetFolderList"
                  }
                ],
                "description": "Request folder to get all folders in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetFolderList"
                  }
                ],
                "description": "Request folder to get all folders in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetFolderList"
                  }
                ],
                "description": "Request folder to get all folders in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Folders/MoveFolder": {
      "post": {
        "tags": ["Folders"],
        "summary": "Moves a folder to another folder.",
        "operationId": "MoveFolder",
        "requestBody": {
          "description": "Represents the model to move a folder.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MoveFolder"
                  }
                ],
                "description": "Represents a move folder model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MoveFolder"
                  }
                ],
                "description": "Represents a move folder model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MoveFolder"
                  }
                ],
                "description": "Represents a move folder model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Folders/MoveObject": {
      "post": {
        "tags": ["Folders"],
        "summary": "Moves an object to another folder.",
        "operationId": "MoveObjectToFolder",
        "requestBody": {
          "description": "Represents the model to move an object.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MoveObject"
                  }
                ],
                "description": "Represents a move object model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MoveObject"
                  }
                ],
                "description": "Represents a move object model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MoveObject"
                  }
                ],
                "description": "Represents a move object model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Folders/{id}/Shortcuts": {
      "delete": {
        "tags": ["Folders"],
        "summary": "Removes shortcut from the specified reference folder.",
        "operationId": "RemoveShortcutFromFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the folder.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Represents logical identifier model of the document object or publication for which to remove a shortcut.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoveShortcut"
                  }
                ],
                "description": "Represents logical identifier model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoveShortcut"
                  }
                ],
                "description": "Represents logical identifier model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoveShortcut"
                  }
                ],
                "description": "Represents logical identifier model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Folders"],
        "summary": "Adds shortcut to the specified reference folder.",
        "operationId": "AddShortcutToFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Specifies the card identifier of the folder to which to add the shortcut.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Represents logical identifier model of the document object or publication for which to create a shortcut.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddShortcut"
                  }
                ],
                "description": "Represents logical identifier model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddShortcut"
                  }
                ],
                "description": "Represents logical identifier model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddShortcut"
                  }
                ],
                "description": "Represents logical identifier model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Folders/{id}/Location": {
      "get": {
        "tags": ["Folders"],
        "summary": "Gets the parents of the given folder.",
        "operationId": "GetFolderLocation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the folder.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "selectedProperties",
            "in": "query",
            "description": "Specifies which properties to return.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Enumeration holding the selected properties."
            }
          },
          {
            "name": "fieldGroup",
            "in": "query",
            "description": "Specifies the group of metadata fields to return.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Groups of metadata fields."
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "Specifies one or more metadata fields to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includeLinks",
            "in": "query",
            "description": "`true` to include the links; otherwise, `false`. Default is `false`.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Folders/ByFolderPath": {
      "get": {
        "tags": ["Folders"],
        "summary": "Gets the metadata of the folder specified by the folder path.",
        "operationId": "GetFolderByFolderPath",
        "parameters": [
          {
            "name": "Path",
            "in": "query",
            "description": "The path of the folder.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "description": "The path of the folder."
            }
          },
          {
            "name": "FieldGroup",
            "in": "query",
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
              "default": "none"
            }
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "A collection of requested metadata fields.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A collection of requested metadata fields."
            }
          },
          {
            "name": "SelectedProperties",
            "in": "query",
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
              "default": "id"
            }
          },
          {
            "name": "IncludeLinks",
            "in": "query",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "schema": {
              "type": "boolean",
              "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Inboxes/{id}/Objects/Get": {
      "post": {
        "tags": ["Inboxes"],
        "summary": "Gets a list of document objects for the specified inbox.",
        "operationId": "GetInboxObjectList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Specify the id of the inbox.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetInboxObjectList"
                  }
                ],
                "description": "Represents an Inbox object list."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetInboxObjectList"
                  }
                ],
                "description": "Represents an Inbox object list."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetInboxObjectList"
                  }
                ],
                "description": "Represents an Inbox object list."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentObject"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentObject"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Inboxes": {
      "get": {
        "tags": ["Inboxes"],
        "summary": "Gets the list of all inboxes.",
        "operationId": "GetInboxList",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Inbox"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Inbox"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Lists/{id}/Values": {
      "get": {
        "tags": ["Lists"],
        "summary": "Get the values for the specified list of values.",
        "operationId": "GetLovValueList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of a list of values (e.g. DRESOLUTION).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activityFilter",
            "in": "query",
            "description": "The filter to limit the result of the active LovValues.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ActivityFilter"
                }
              ],
              "description": "Allows explicit filtering."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LovValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LovValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Lists"],
        "summary": "Create a lov value in the specified list of value.",
        "operationId": "CreateLovValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The list of values identifier (e.g. DRESOLUTION).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateLovValue"
                  }
                ],
                "description": "Represents a create lov Value model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateLovValue"
                  }
                ],
                "description": "Represents a create lov Value model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateLovValue"
                  }
                ],
                "description": "Represents a create lov Value model."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LovValue"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LovValue"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Lists/{id}/Values/{valueId}": {
      "put": {
        "tags": ["Lists"],
        "summary": "Update Lov value based on the specified parameters.",
        "operationId": "UpdateLovValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The list of values identifier (e.g. DRESOLUTION).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "valueId",
            "in": "path",
            "description": "The lov value identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update Lov value model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateLovValue"
                  }
                ],
                "description": "Represents an update lov Value model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateLovValue"
                  }
                ],
                "description": "Represents an update lov Value model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateLovValue"
                  }
                ],
                "description": "Represents an update lov Value model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Lists"],
        "summary": "Delete lov value based on the specified parameters.",
        "operationId": "DeleteLovValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The list of values identifier (e.g. DRESOLUTION).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "valueId",
            "in": "path",
            "description": "The lov value identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Lists"],
        "summary": "Get the lov value based on the specified parameters.",
        "operationId": "GetLovValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of a list of values (e.g. DRESOLUTION).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "valueId",
            "in": "path",
            "description": "The lov value identifier (e.g. VRESHIGH for DRESOLUTION).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LovValue"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LovValue"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Lists/Get": {
      "post": {
        "tags": ["Lists"],
        "summary": "Get the public list of LOVs.",
        "operationId": "GetLovList",
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetLovList"
                  }
                ],
                "description": "Represents a get Lov list model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetLovList"
                  }
                ],
                "description": "Represents a get Lov list model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetLovList"
                  }
                ],
                "description": "Represents a get Lov list model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LovList"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LovList"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/MetadataBinding/Fields/{fieldName}/Levels/{fieldLevel}/Tags/Get": {
      "post": {
        "tags": ["MetadataBinding"],
        "summary": "Gets list of tags that match the criteria given in the parameters for specified field.",
        "operationId": "GetMetadataBindingTagList",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "Element name of a field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldLevel",
            "in": "path",
            "description": "Level of an object.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Level"
                }
              ],
              "description": "Enumeration holding the visible InfoShare hierarchy levels."
            }
          }
        ],
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetMetadataBindingTagList"
                  }
                ],
                "description": "Request object to get metadata bound tags that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetMetadataBindingTagList"
                  }
                ],
                "description": "Request object to get metadata bound tags that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetMetadataBindingTagList"
                  }
                ],
                "description": "Request object to get metadata bound tags that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/MetadataBinding/Fields/{fieldName}/Levels/{fieldLevel}/TagStructure/Get": {
      "post": {
        "tags": ["MetadataBinding"],
        "summary": "Gets tags structure that match the criteria given in the parameters for specified field.",
        "operationId": "GetMetadataBindingTagStructure",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "Element name of a field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldLevel",
            "in": "path",
            "description": "Level of an object.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Level"
                }
              ],
              "description": "Enumeration holding the visible InfoShare hierarchy levels."
            }
          }
        ],
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetMetadataBindingTagStructure"
                  }
                ],
                "description": "Request object to get metadata bound tags structure that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetMetadataBindingTagStructure"
                  }
                ],
                "description": "Request object to get metadata bound tags structure that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetMetadataBindingTagStructure"
                  }
                ],
                "description": "Request object to get metadata bound tags structure that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagStructure"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagStructure"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/MetadataBinding/SmartTags/Get": {
      "post": {
        "tags": ["MetadataBinding"],
        "summary": "Gets the smart tags of given content.",
        "operationId": "GetMetadataBindingSmartTags",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["content", "metadata"],
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "format": "binary"
                  },
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GetMetadataBindingSmartTags"
                      }
                    ]
                  }
                }
              },
              "encoding": {
                "content": {
                  "style": "form"
                },
                "metadata": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldTag"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldTag"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/My": {
      "get": {
        "tags": ["My"],
        "summary": "Gets current user in the repository.",
        "operationId": "GetCurrentUser",
        "parameters": [
          {
            "name": "SelectedProperties",
            "in": "query",
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
              "default": "id"
            }
          },
          {
            "name": "FieldGroup",
            "in": "query",
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
              "default": "none"
            }
          },
          {
            "name": "Field",
            "in": "query",
            "description": "Specifies one or more metadata fields to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies one or more metadata fields to return."
            }
          },
          {
            "name": "IncludeLinks",
            "in": "query",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "schema": {
              "type": "boolean",
              "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["My"],
        "summary": "Update user who made the call.",
        "operationId": "UpdateCurrentUser",
        "requestBody": {
          "description": "Specifies fields that should be updated and values for them.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateUser"
                  }
                ],
                "description": "Represents an update user model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateUser"
                  }
                ],
                "description": "Represents an update user model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateUser"
                  }
                ],
                "description": "Represents an update user model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/My/PreferenceSets/{SetName}": {
      "get": {
        "tags": ["My"],
        "summary": "Get preference set for the current user.",
        "operationId": "GetMyPreferences",
        "parameters": [
          {
            "name": "SetName",
            "in": "path",
            "description": "The name of the preference set to be retrieved, if the set name can not be found empty preference set is returned.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
              "type": "string",
              "description": "The name of the preference set to be retrieved, if the set name can not be found empty preference set is returned."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceSet"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["My"],
        "summary": "Update current user preferences.",
        "operationId": "SetMyPreferences",
        "parameters": [
          {
            "name": "SetName",
            "in": "path",
            "description": "The name of the preference set to be updated.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
              "type": "string",
              "description": "The name of the preference set to be updated."
            }
          }
        ],
        "requestBody": {
          "description": "Update current user preference set model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePreferenceSet"
                  }
                ],
                "description": "Represents an update current user preference set model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePreferenceSet"
                  }
                ],
                "description": "Represents an update current user preference set model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePreferenceSet"
                  }
                ],
                "description": "Represents an update current user preference set model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["My"],
        "summary": "Delete current user preferences.",
        "operationId": "DeleteMyPreferences",
        "parameters": [
          {
            "name": "SetName",
            "in": "path",
            "description": "The name of the preference set to delete.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
              "type": "string",
              "description": "The name of the preference set to delete."
            }
          },
          {
            "name": "ItemName",
            "in": "query",
            "description": "The name of the preference item to delete.",
            "schema": {
              "maxLength": 255,
              "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
              "type": "string",
              "description": "The name of the preference item to delete.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/My/Privileges": {
      "get": {
        "tags": ["My"],
        "summary": "Get privileges for the current user.",
        "operationId": "GetMyPrivileges",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LovValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LovValue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/Objects/{id}": {
      "get": {
        "tags": ["Objects"],
        "summary": "Gets the object type based on the object identifier.",
        "operationId": "GetObject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The object identifier (e.g. logical id <tt>GUID-...</tt>, language card, folder id <tt>12345678</tt>, user id <tt>VUSERAUTHOR</tt>, user group id <tt>VUSERGROUPDEFAULTDEPARTMENT)</tt>.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseObject"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseObject"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/OutputFormats/{Id}": {
      "get": {
        "tags": ["OutputFormats"],
        "summary": "Gets the output format.",
        "operationId": "GetOutputFormat",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Identifier of the output format.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "Identifier of the output format."
            }
          },
          {
            "name": "SelectedProperties",
            "in": "query",
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
              "default": "id"
            }
          },
          {
            "name": "FieldGroup",
            "in": "query",
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
              "default": "none"
            }
          },
          {
            "name": "Field",
            "in": "query",
            "description": "Specifies one or more metadata fields to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies one or more metadata fields to return."
            }
          },
          {
            "name": "IncludeLinks",
            "in": "query",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "schema": {
              "type": "boolean",
              "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutputFormat"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutputFormat"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["OutputFormats"],
        "summary": "Update output format with given id in the repository.",
        "operationId": "UpdateOutputFormat",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Identifier of the output format.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "Identifier of the output format."
            }
          }
        ],
        "requestBody": {
          "description": "Request body with a list of the fields.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOutputFormat"
                  }
                ],
                "description": "Represents an update output format model"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOutputFormat"
                  }
                ],
                "description": "Represents an update output format model"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOutputFormat"
                  }
                ],
                "description": "Represents an update output format model"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["OutputFormats"],
        "summary": "Delete output format with given id in the repository.",
        "operationId": "DeleteOutputFormat",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Identifier of the output format.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "Identifier of the output format."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/OutputFormats": {
      "post": {
        "tags": ["OutputFormats"],
        "summary": "Creates output format.",
        "operationId": "CreateOutputFormat",
        "requestBody": {
          "description": "Request body with a list of the fields.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateOutputFormat"
                  }
                ],
                "description": "Represents a create output format model"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateOutputFormat"
                  }
                ],
                "description": "Represents a create output format model"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateOutputFormat"
                  }
                ],
                "description": "Represents a create output format model"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutputFormat"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutputFormat"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/OutputFormats/Get": {
      "post": {
        "tags": ["OutputFormats"],
        "summary": "Gets the output formats.",
        "operationId": "GetOutputFormatList",
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetOutputFormatList"
                  }
                ],
                "description": "Request object to get all output formats in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetOutputFormatList"
                  }
                ],
                "description": "Request object to get all output formats in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetOutputFormatList"
                  }
                ],
                "description": "Request object to get all output formats in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutputFormat"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutputFormat"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Projects/ByProjectId/{ProjectId}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get a project - NOT IMPLEMENTED.",
        "operationId": "GetProjectByProjectId",
        "parameters": [
          {
            "name": "ProjectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Projects/ByAssigneeCardId/{AssigneeCardId}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get an assignee - NOT IMPLEMENTED.",
        "operationId": "GetProjectByAssigneeCardId",
        "parameters": [
          {
            "name": "AssigneeCardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Projects": {
      "post": {
        "tags": ["Projects"],
        "summary": "Creates a new project.",
        "operationId": "CreateProject",
        "requestBody": {
          "description": "The create project model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProject"
                  }
                ],
                "description": "Represents a create project model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProject"
                  }
                ],
                "description": "Represents a create project model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProject"
                  }
                ],
                "description": "Represents a create project model."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Projects/Get": {
      "post": {
        "tags": ["Projects"],
        "summary": "Gets all projects in the Repository that match the criteria given in the parameters.",
        "operationId": "GetProjectList",
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetProjectList"
                  }
                ],
                "description": "Represents a get project list model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetProjectList"
                  }
                ],
                "description": "Represents a get project list model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetProjectList"
                  }
                ],
                "description": "Represents a get project list model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Projects/ByProjectId/Get": {
      "post": {
        "tags": ["Projects"],
        "summary": "Gets all projects in the Repository that match the criteria given in the parameters.",
        "operationId": "GetProjectListByProjectId",
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetProjectListByProjectId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetProjectListByProjectId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetProjectListByProjectId"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Projects/ByProjectId/{projectId}": {
      "put": {
        "tags": ["Projects"],
        "summary": "Updates the project based on the specified parameters.",
        "operationId": "UpdateProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The project identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update project model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProject"
                  }
                ],
                "description": "Represents an update project model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProject"
                  }
                ],
                "description": "Represents an update project model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProject"
                  }
                ],
                "description": "Represents an update project model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "Deletes the project based on the specified parameters.",
        "operationId": "DeleteProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The project identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Delete project model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProject"
                  }
                ],
                "description": "Represents a delete project model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProject"
                  }
                ],
                "description": "Represents a delete project model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProject"
                  }
                ],
                "description": "Represents a delete project model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Projects/Assignees": {
      "post": {
        "tags": ["Projects"],
        "summary": "Creates a new project assignee.",
        "operationId": "CreateProjectAssignee",
        "requestBody": {
          "description": "The create project assignee model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectAssignee"
                  }
                ],
                "description": "Represents a create project assignee model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectAssignee"
                  }
                ],
                "description": "Represents a create project assignee model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectAssignee"
                  }
                ],
                "description": "Represents a create project assignee model."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Projects/ByAssigneeCardId/{assigneeCardId}": {
      "put": {
        "tags": ["Projects"],
        "summary": "Updates the project's assignee based on the specified parameters.",
        "operationId": "UpdateProjectAssignee",
        "parameters": [
          {
            "name": "assigneeCardId",
            "in": "path",
            "description": "The assignee card identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update project's assignee model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectAssignee"
                  }
                ],
                "description": "Represent update project's assignee model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectAssignee"
                  }
                ],
                "description": "Represent update project's assignee model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectAssignee"
                  }
                ],
                "description": "Represent update project's assignee model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "Deletes the project's assignee based on the specified parameters.",
        "operationId": "DeleteProjectAssignee",
        "parameters": [
          {
            "name": "assigneeCardId",
            "in": "path",
            "description": "The assignee card identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Delete project's assignee model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectAssignee"
                  }
                ],
                "description": "Represent delete project's assignee model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectAssignee"
                  }
                ],
                "description": "Represent delete project's assignee model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectAssignee"
                  }
                ],
                "description": "Represent delete project's assignee model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Publications": {
      "post": {
        "tags": ["Publications"],
        "summary": "Creates publication. - NOT IMPLEMENTED.",
        "operationId": "CreatePublication",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publication"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publication"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Publications/Versions": {
      "post": {
        "tags": ["Publications"],
        "summary": "Creates version of a publication. - NOT IMPLEMENTED.",
        "operationId": "CreatePublicationVersion",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publication"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publication"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Publications/Languages": {
      "post": {
        "tags": ["Publications"],
        "summary": "Creates language of a publication. - NOT IMPLEMENTED.",
        "operationId": "CreatePublicationLanguage",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publication"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publication"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Publications/ByLanguageCardId/{languageCardId}": {
      "put": {
        "tags": ["Publications"],
        "summary": "Updates the publication output by its language card identifier.",
        "operationId": "UpdatePublicationByLanguageCardId",
        "parameters": [
          {
            "name": "languageCardId",
            "in": "path",
            "description": "Language card identifier of the publication output.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePublication"
                  }
                ],
                "description": "Represents an update model for publication."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePublication"
                  }
                ],
                "description": "Represents an update model for publication."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePublication"
                  }
                ],
                "description": "Represents an update model for publication."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Publications"],
        "summary": "Deletes the publication output by its language card identifier.",
        "operationId": "DeletePublicationByLanguageCardId",
        "parameters": [
          {
            "name": "languageCardId",
            "in": "path",
            "description": "The language card identifier of the publication output.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The parameters that will be used for delete operation.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeletePublicationByLanguageCardId"
                  }
                ],
                "description": "Request object to delete publication."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeletePublicationByLanguageCardId"
                  }
                ],
                "description": "Request object to delete publication."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeletePublicationByLanguageCardId"
                  }
                ],
                "description": "Request object to delete publication."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Publications"],
        "summary": "Get publication in the Repository that match the criteria given in the parameters.",
        "operationId": "GetPublicationByLanguageCardId",
        "parameters": [
          {
            "name": "languageCardId",
            "in": "path",
            "description": "Language card identifier of the publication.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "selectedProperties",
            "in": "query",
            "description": "Selected properties to filter the properties. Default is Id.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Enumeration holding the selected properties."
            }
          },
          {
            "name": "fieldGroup",
            "in": "query",
            "description": "Field group of metadata fields. Default is None.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Groups of metadata fields."
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "Specifies one or more metadata fields to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includeLinks",
            "in": "query",
            "description": "`true` to include the links; otherwise, `false`. Default is `false`.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publication"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publication"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Publications/ByLogicalId/{logicalId}": {
      "put": {
        "tags": ["Publications"],
        "summary": "Updates publication in the repository that match the criteria given in the parameters.",
        "operationId": "UpdatePublicationByLogicalId",
        "parameters": [
          {
            "name": "logicalId",
            "in": "path",
            "description": "Logical identifier of the publication.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The version of the publication to update.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFormat",
            "in": "query",
            "description": "The output Format of the publication to update.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCombination",
            "in": "query",
            "description": "The languageCombination of the publication to update.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePublication"
                  }
                ],
                "description": "Represents an update model for publication."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePublication"
                  }
                ],
                "description": "Represents an update model for publication."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePublication"
                  }
                ],
                "description": "Represents an update model for publication."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Publications"],
        "summary": "Deletes a publication that match the criteria given in the parameters.",
        "operationId": "DeletePublicationByLogicalId",
        "parameters": [
          {
            "name": "logicalId",
            "in": "path",
            "description": "The logical identifier of the publication.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The version number.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFormatId",
            "in": "query",
            "description": "The element name of the output format.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCombination",
            "in": "query",
            "description": "The language combination of the PublicationOutput (e.g. en, en+fr+nl,...)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeletePublicationByLogicalId"
                  }
                ],
                "description": "Request object to delete publication."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeletePublicationByLogicalId"
                  }
                ],
                "description": "Request object to delete publication."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeletePublicationByLogicalId"
                  }
                ],
                "description": "Request object to delete publication."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Publications"],
        "summary": "Get publication in the Repository that match the criteria given in the parameters.",
        "operationId": "GetPublicationByLogicalId",
        "parameters": [
          {
            "name": "logicalId",
            "in": "path",
            "description": "The logical identifier of the object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The version number.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFormat",
            "in": "query",
            "description": "The label/name of the OutputFormat (e.g. Manual, Documentation Online,...).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCombination",
            "in": "query",
            "description": "The language combination of the PublicationOutput (e.g. en, en+fr+nl,...).",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "selectedProperties",
            "in": "query",
            "description": "Selected properties to filter the properties. Default is Id.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Enumeration holding the selected properties."
            }
          },
          {
            "name": "fieldGroup",
            "in": "query",
            "description": "Field group of metadata fields. Default is None.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Groups of metadata fields."
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "Specifies one or more metadata fields to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includeLinks",
            "in": "query",
            "description": "`true` to include the links; otherwise, `false`. Default is `false`.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publication"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publication"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Publications/ByLanguageCardId/{languageCardId}/Release": {
      "post": {
        "tags": ["Publications"],
        "summary": "Releases the publication output by its language card identifier.",
        "operationId": "ReleasePublication",
        "parameters": [
          {
            "name": "languageCardId",
            "in": "path",
            "description": "Language card identifier of the publication output.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReleasePublication"
                  }
                ],
                "description": "Represents a release model for publication."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReleasePublication"
                  }
                ],
                "description": "Represents a release model for publication."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReleasePublication"
                  }
                ],
                "description": "Represents a release model for publication."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Publications/ByLanguageCardId/{languageCardId}/Unrelease": {
      "post": {
        "tags": ["Publications"],
        "summary": "Unreleases the publication output by its language card identifier.",
        "operationId": "UnreleasePublication",
        "parameters": [
          {
            "name": "languageCardId",
            "in": "path",
            "description": "Language card identifier of the publication output.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UnreleasePublication"
                  }
                ],
                "description": "Model representing parameters for unreleasing a publication"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UnreleasePublication"
                  }
                ],
                "description": "Model representing parameters for unreleasing a publication"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UnreleasePublication"
                  }
                ],
                "description": "Model representing parameters for unreleasing a publication"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Publications/ByLogicalId/Get": {
      "post": {
        "tags": ["Publications"],
        "summary": "Gets all publications in the Repository that match the criteria given in the parameters.",
        "description": "Depending on which status filter is specified, the objects with following status types can be returned:\r\n<table class=\"table\"><thead><tr><th>Status filter</th><th>Returned status types</th></tr></thead><tbody><tr><td>All</td><td>All status types</td></tr><tr><td>LatestReleased</td><td>Latest released excluding out-of-date</td></tr><tr><td>DraftOrLatestReleased</td><td>Draft and latest released excluding out-of-date</td></tr><tr><td>AllReleased</td><td>All released including out-of-date</td></tr></tbody></table>",
        "operationId": "GetPublicationListByLogicalId",
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetPublicationListByLogicalId"
                  }
                ],
                "description": "Request object to get all publications in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetPublicationListByLogicalId"
                  }
                ],
                "description": "Request object to get all publications in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetPublicationListByLogicalId"
                  }
                ],
                "description": "Request object to get all publications in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Publication"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Publication"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Publications/Get": {
      "post": {
        "tags": ["Publications"],
        "summary": "Gets all publications in the Repository that match the criteria given in the parameters.",
        "description": "Depending on which status filter is specified, the objects with following status types can be returned:\r\n<table class=\"table\"><thead><tr><th>Status filter</th><th>Returned status types</th></tr></thead><tbody><tr><td>All</td><td>All status types</td></tr><tr><td>LatestReleased</td><td>Latest released excluding out-of-date</td></tr><tr><td>DraftOrLatestReleased</td><td>Draft and latest released excluding out-of-date</td></tr><tr><td>AllReleased</td><td>All released including out-of-date</td></tr></tbody></table>",
        "operationId": "GetPublicationList",
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetPublicationList"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetPublicationList"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetPublicationList"
                  }
                ],
                "description": "Request object to get all objects in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Publication"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Publication"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Publications/ByLanguageCardId/Get": {
      "post": {
        "tags": ["Publications"],
        "summary": "Get publication.",
        "operationId": "GetPublicationListByLanguageCardId",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetPublicationListByLanguageCardId"
                  }
                ],
                "description": "Request object to get all publications in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetPublicationListByLanguageCardId"
                  }
                ],
                "description": "Request object to get all publications in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetPublicationListByLanguageCardId"
                  }
                ],
                "description": "Request object to get all publications in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Publication"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Publication"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Publications/ByLanguageCardId/{languageCardId}/Content": {
      "get": {
        "tags": ["Publications"],
        "summary": "Gets the content by its language card identifier.",
        "operationId": "GetPublicationContentByLanguageCardId",
        "parameters": [
          {
            "name": "languageCardId",
            "in": "path",
            "description": "Language card identifier of the publication.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Publications/ByLogicalId/{logicalId}/Location": {
      "get": {
        "tags": ["Publications"],
        "summary": "Gets the location of a publication in the folder structure.",
        "operationId": "GetPublicationLocation",
        "parameters": [
          {
            "name": "logicalId",
            "in": "path",
            "description": "Logical identifier of the publication.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "selectedProperties",
            "in": "query",
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Enumeration holding the selected properties."
            }
          },
          {
            "name": "fieldGroup",
            "in": "query",
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Groups of metadata fields."
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "Specifies one or more metadata fields to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includeLinks",
            "in": "query",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Publications/ByLanguageCardId/{languageCardId}/CancelPublish": {
      "post": {
        "tags": ["Publications"],
        "summary": "Cancels the publishing of the publication output.",
        "operationId": "CancelPublicationPublish",
        "parameters": [
          {
            "name": "languageCardId",
            "in": "path",
            "description": "Language card identifier of the publication output.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CancelPublicationPublish"
                  }
                ],
                "description": "Represents an update model for CancelPublicationPublish."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CancelPublicationPublish"
                  }
                ],
                "description": "Represents an update model for CancelPublicationPublish."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CancelPublicationPublish"
                  }
                ],
                "description": "Represents an update model for CancelPublicationPublish."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Publications/ByLanguageCardId/{languageCardId}/Publish": {
      "post": {
        "tags": ["Publications"],
        "summary": "Publishes a publication output.",
        "operationId": "PublishPublication",
        "parameters": [
          {
            "name": "languageCardId",
            "in": "path",
            "description": "Language card identifier of the publication output.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Required current metadata of the object.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublishPublication"
                  }
                ],
                "description": "Represents a publish model for publication."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublishPublication"
                  }
                ],
                "description": "Represents a publish model for publication."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublishPublication"
                  }
                ],
                "description": "Represents a publish model for publication."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventProgress"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventProgress"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Publications/ByLanguageCardId/{languageCardId}/Unpublish": {
      "post": {
        "tags": ["Publications"],
        "summary": "Unpublish a publication output.",
        "operationId": "UnpublishPublication",
        "parameters": [
          {
            "name": "languageCardId",
            "in": "path",
            "description": "Language card identifier of the publication output.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Required current metadata of the object.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UnpublishPublication"
                  }
                ],
                "description": "Represents an unpublish model for publication."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UnpublishPublication"
                  }
                ],
                "description": "Represents an unpublish model for publication."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UnpublishPublication"
                  }
                ],
                "description": "Represents an unpublish model for publication."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventProgress"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventProgress"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Search": {
      "post": {
        "tags": ["Search"],
        "summary": "Search all document object types in the repository that match the criteria given in the parameters.",
        "operationId": "Search",
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SearchRequest"
                  }
                ],
                "description": "Represents search request criteria to find document objects."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SearchRequest"
                  }
                ],
                "description": "Represents search request criteria to find document objects."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SearchRequest"
                  }
                ],
                "description": "Represents search request criteria to find document objects."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Settings": {
      "get": {
        "tags": ["Settings"],
        "summary": "Gets settings in the repository that match the criteria given in the parameters.",
        "operationId": "GetSettings",
        "parameters": [
          {
            "name": "Field",
            "in": "query",
            "description": "Specifies one or more metadata fields to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies one or more metadata fields to return."
            }
          },
          {
            "name": "SelectedProperties",
            "in": "query",
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
              "default": "id"
            }
          },
          {
            "name": "FieldGroup",
            "in": "query",
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
              "default": "none"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Setting"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Settings"],
        "summary": "Updates submitted settings fields if the current required fields conditions are satisfied.",
        "operationId": "UpdateSettings",
        "requestBody": {
          "description": "Update settings model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateSettings"
                  }
                ],
                "description": "Represents an update settings model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateSettings"
                  }
                ],
                "description": "Represents an update settings model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateSettings"
                  }
                ],
                "description": "Represents an update settings model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Settings/WorkflowReport": {
      "get": {
        "tags": ["Settings"],
        "summary": "Gets settings of the workflow report.",
        "operationId": "GetWorkflowReportSettings",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowReportSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowReportSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Settings/TranslationReport": {
      "get": {
        "tags": ["Settings"],
        "summary": "Gets settings of the translation report.",
        "operationId": "GetTranslationReportSettings",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranslationReportSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranslationReportSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Settings/FieldDefinitions": {
      "get": {
        "tags": ["Settings"],
        "summary": "Gets field definitions.",
        "operationId": "GetFieldDefinitionsSettings",
        "parameters": [
          {
            "name": "ObjectTypes",
            "in": "query",
            "description": "A list of object type to retrieve field definition for. if not provided field definition for all types will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ObjectType"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldSetup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldSetup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Settings/TranslationStatuses": {
      "get": {
        "tags": ["Settings"],
        "summary": "Gets translation status list.",
        "operationId": "GetTranslationStatusListSettings",
        "parameters": [
          {
            "name": "DocumentObjectType",
            "in": "query",
            "description": "The document object type to retrieve translation statuses for.\r\n<remarks><value>Undefined</value> is not supported for this parameter.\r\n</remarks>",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DocumentObjectType"
                }
              ],
              "description": "The document object type to retrieve translation statuses for.\r\n<remarks><value>Undefined</value> is not supported for this parameter.\r\n</remarks>"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TranslationStatus"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TranslationStatus"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/UserGroups/{Id}": {
      "get": {
        "tags": ["UserGroups"],
        "summary": "Gets the user group.",
        "operationId": "GetUserGroup",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Identifier of the group.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "Identifier of the group."
            }
          },
          {
            "name": "SelectedProperties",
            "in": "query",
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
              "default": "id"
            }
          },
          {
            "name": "FieldGroup",
            "in": "query",
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
              "default": "none"
            }
          },
          {
            "name": "Field",
            "in": "query",
            "description": "Specifies one or more metadata fields to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies one or more metadata fields to return."
            }
          },
          {
            "name": "IncludeLinks",
            "in": "query",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "schema": {
              "type": "boolean",
              "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["UserGroups"],
        "summary": "Update user group with given id in the repository.",
        "operationId": "UpdateUserGroup",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Identifier of the group.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "Identifier of the group."
            }
          }
        ],
        "requestBody": {
          "description": "Request body with a list of the fields.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateUserGroup"
                  }
                ],
                "description": "Represents an update user group model"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateUserGroup"
                  }
                ],
                "description": "Represents an update user group model"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateUserGroup"
                  }
                ],
                "description": "Represents an update user group model"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["UserGroups"],
        "summary": "Delete user group with given id in the repository.",
        "operationId": "DeleteUserGroup",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Identifier of the user group.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "Identifier of the user group."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/UserGroups/Get": {
      "post": {
        "tags": ["UserGroups"],
        "summary": "Gets the user groups.",
        "operationId": "GetUserGroupList",
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetUserGroupList"
                  }
                ],
                "description": "Request object to get all user groups in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetUserGroupList"
                  }
                ],
                "description": "Request object to get all user groups in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetUserGroupList"
                  }
                ],
                "description": "Request object to get all user groups in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/UserGroups": {
      "post": {
        "tags": ["UserGroups"],
        "summary": "Creates user group.",
        "operationId": "CreateUserGroup",
        "requestBody": {
          "description": "Request body with a list of the fields.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUserGroup"
                  }
                ],
                "description": "Represents a create user group model"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUserGroup"
                  }
                ],
                "description": "Represents a create user group model"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUserGroup"
                  }
                ],
                "description": "Represents a create user group model"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/UserRoles/{Id}": {
      "get": {
        "tags": ["UserRoles"],
        "summary": "Gets the user role.",
        "operationId": "GetUserRole",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Identifier of the role.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "Identifier of the role."
            }
          },
          {
            "name": "SelectedProperties",
            "in": "query",
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
              "default": "id"
            }
          },
          {
            "name": "FieldGroup",
            "in": "query",
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
              "default": "none"
            }
          },
          {
            "name": "Field",
            "in": "query",
            "description": "Specifies one or more metadata fields to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies one or more metadata fields to return."
            }
          },
          {
            "name": "IncludeLinks",
            "in": "query",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "schema": {
              "type": "boolean",
              "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRole"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRole"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["UserRoles"],
        "summary": "Update user role with given id in the repository.",
        "operationId": "UpdateUserRole",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Identifier of the role.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "Identifier of the role."
            }
          }
        ],
        "requestBody": {
          "description": "Request body with a list of the fields.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateUserRole"
                  }
                ],
                "description": "Represents an update user role model"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateUserRole"
                  }
                ],
                "description": "Represents an update user role model"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateUserRole"
                  }
                ],
                "description": "Represents an update user role model"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["UserRoles"],
        "summary": "Delete user role with given id in the repository.",
        "operationId": "DeleteUserRole",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Identifier of the user role.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "Identifier of the user role."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/UserRoles": {
      "post": {
        "tags": ["UserRoles"],
        "summary": "Creates user role.",
        "operationId": "CreateUserRole",
        "requestBody": {
          "description": "Request body with a list of the fields.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUserRole"
                  }
                ],
                "description": "Represents a create user role model"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUserRole"
                  }
                ],
                "description": "Represents a create user role model"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUserRole"
                  }
                ],
                "description": "Represents a create user role model"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRole"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRole"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/UserRoles/Get": {
      "post": {
        "tags": ["UserRoles"],
        "summary": "Gets all user roles in the repository that match the criteria given in the parameters.",
        "operationId": "GetUserRoleList",
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetUserRoleList"
                  }
                ],
                "description": "Request object to get all user roles in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetUserRoleList"
                  }
                ],
                "description": "Request object to get all user roles in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetUserRoleList"
                  }
                ],
                "description": "Request object to get all user roles in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRole"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRole"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Users/Get": {
      "post": {
        "tags": ["Users"],
        "summary": "Gets all users in the repository that match the criteria given in the parameters.",
        "operationId": "GetUserList",
        "requestBody": {
          "description": "Request object with the criteria in its properties.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetUserList"
                  }
                ],
                "description": "Request object to get all users in the repository that match the criteria given in the properties."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetUserList"
                  }
                ],
                "description": "Request object to get all users in the repository that match the criteria given in the properties."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetUserList"
                  }
                ],
                "description": "Request object to get all users in the repository that match the criteria given in the properties."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Users/{Id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Gets a user in the repository that match the criteria given in the parameters.",
        "operationId": "GetUser",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the user.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "The identifier of the user."
            }
          },
          {
            "name": "SelectedProperties",
            "in": "query",
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SelectedProperties"
                }
              ],
              "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
              "default": "id"
            }
          },
          {
            "name": "FieldGroup",
            "in": "query",
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldGroup"
                }
              ],
              "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
              "default": "none"
            }
          },
          {
            "name": "Field",
            "in": "query",
            "description": "Specifies one or more metadata fields to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies one or more metadata fields to return."
            }
          },
          {
            "name": "IncludeLinks",
            "in": "query",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "schema": {
              "type": "boolean",
              "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Updates user with given id in the repository.",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the user.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "The identifier of the user."
            }
          }
        ],
        "requestBody": {
          "description": "Request body with a list of the fields.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateUser"
                  }
                ],
                "description": "Represents an update user model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateUser"
                  }
                ],
                "description": "Represents an update user model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateUser"
                  }
                ],
                "description": "Represents an update user model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user with given id in the repository.",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Identifier of the user.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "Identifier of the user."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Users": {
      "post": {
        "tags": ["Users"],
        "summary": "Creates user.",
        "operationId": "CreateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUser"
                  }
                ],
                "description": "Represents an create user model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUser"
                  }
                ],
                "description": "Represents an create user model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUser"
                  }
                ],
                "description": "Represents an create user model."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Users/{Id}/PreferenceSets/{SetName}": {
      "get": {
        "tags": ["Users"],
        "summary": "Gets preference set for the user.",
        "operationId": "GetUserPreferences",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the user.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "The identifier of the user."
            }
          },
          {
            "name": "SetName",
            "in": "path",
            "description": "The name of the preference set to be retrieved, if the set name can not be found empty preference set is returned.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
              "type": "string",
              "description": "The name of the preference set to be retrieved, if the set name can not be found empty preference set is returned."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceSet"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Sets user preferences based on the specified parameters.",
        "operationId": "SetUserPreferences",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the user.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "The identifier of the user."
            }
          },
          {
            "name": "SetName",
            "in": "path",
            "description": "The name of the preference set to be updated.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
              "type": "string",
              "description": "The name of the preference set to be updated."
            }
          }
        ],
        "requestBody": {
          "description": "Request body with a preference list.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePreferenceSet"
                  }
                ],
                "description": "Represents an update current user preference set model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePreferenceSet"
                  }
                ],
                "description": "Represents an update current user preference set model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePreferenceSet"
                  }
                ],
                "description": "Represents an update current user preference set model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Deletes user preferences.",
        "operationId": "DeleteUserPreferences",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The identifier of the user.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string",
              "description": "The identifier of the user."
            }
          },
          {
            "name": "SetName",
            "in": "path",
            "description": "The name of the preference set to be deleted.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
              "type": "string",
              "description": "The name of the preference set to be deleted."
            }
          },
          {
            "name": "ItemName",
            "in": "query",
            "description": "The item name of the preference item which need to be deleted from the set; if null or empty - the entire set with all the items will be deleted.",
            "schema": {
              "maxLength": 255,
              "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
              "type": "string",
              "description": "The item name of the preference item which need to be deleted from the set; if null or empty - the entire set with all the items will be deleted.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Workflows/StatusDefinitions": {
      "get": {
        "tags": ["Workflows"],
        "summary": "Get all status definitions.",
        "operationId": "GetStatusDefinitionList",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatusDefinition"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatusDefinition"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Workflows"],
        "summary": "Create a status definition.",
        "operationId": "CreateStatusDefinition",
        "requestBody": {
          "description": "The create status definition model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateStatusDefinition"
                  }
                ],
                "description": "Represents a model for create status definition."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateStatusDefinition"
                  }
                ],
                "description": "Represents a model for create status definition."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateStatusDefinition"
                  }
                ],
                "description": "Represents a model for create status definition."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusDefinition"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v3/Workflows/StatusDefinitions/{id}": {
      "get": {
        "tags": ["Workflows"],
        "summary": "Get a status definition.",
        "operationId": "GetStatusDefinition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The status definition id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusDefinition"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Workflows"],
        "summary": "Update status definition.",
        "operationId": "UpdateStatusDefinition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the status definition.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update status definition model.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateStatusDefinition"
                  }
                ],
                "description": "Represents an update status definition model."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateStatusDefinition"
                  }
                ],
                "description": "Represents an update status definition model."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateStatusDefinition"
                  }
                ],
                "description": "Represents an update status definition model."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Workflows"],
        "summary": "Deletes a status definition by its identifier.",
        "operationId": "DeleteStatusDefinition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the status definition.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoShareProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActivityFilter": {
        "enum": ["none", "active", "inactive"],
        "type": "string",
        "description": "Allows explicit filtering."
      },
      "AddShortcut": {
        "required": ["logicalId"],
        "type": "object",
        "properties": {
          "logicalId": {
            "minLength": 1,
            "type": "string",
            "description": "Specify logical identifier of the document object or publication for which to create a shortcut."
          }
        },
        "additionalProperties": false,
        "description": "Represents logical identifier model."
      },
      "AndSearchExpression": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GroupSearchExpression"
          }
        ],
        "additionalProperties": false,
        "description": "Represents collection of search expression to be evaluated with AND logical operator."
      },
      "AnywhereSearchFieldValue": {
        "required": ["value"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchExpression"
          }
        ],
        "properties": {
          "operator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FullTextSearchOperator"
              }
            ],
            "description": "The search operator."
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The value to search for."
          }
        },
        "additionalProperties": false,
        "description": "Represents anywhere search field value."
      },
      "BackgroundTask": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "description": "The identifier of the task.",
            "format": "int64"
          },
          "progressId": {
            "type": "integer",
            "description": "The progress id.",
            "format": "int64"
          },
          "eventId": {
            "type": "string",
            "description": "The event id."
          }
        },
        "additionalProperties": false,
        "description": "Represents a background task."
      },
      "BaseFolder": {
        "enum": ["none", "data", "system", "favorites", "editorTemplate"],
        "type": "string",
        "description": "Enumeration holding all base folders."
      },
      "BaseItem": {
        "required": ["type"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RelatedInfo"
          }
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The identifier."
          },
          "title": {
            "type": "string",
            "description": "The title.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an item.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "User": "#/components/schemas/User",
            "UserRole": "#/components/schemas/UserRole",
            "UserGroup": "#/components/schemas/UserGroup",
            "Setting": "#/components/schemas/Setting",
            "SearchObject": "#/components/schemas/SearchObject",
            "Publication": "#/components/schemas/Publication",
            "Project": "#/components/schemas/Project",
            "OutputFormat": "#/components/schemas/OutputFormat",
            "BaseObject": "#/components/schemas/BaseObject",
            "EventProgress": "#/components/schemas/EventProgress",
            "LovList": "#/components/schemas/LovList",
            "LovValue": "#/components/schemas/LovValue",
            "RevisionInfo": "#/components/schemas/RevisionInfo",
            "Tag": "#/components/schemas/Tag",
            "FormFieldOperator": "#/components/schemas/FormFieldOperator",
            "FullTextSearchFormFieldOperator": "#/components/schemas/FullTextSearchFormFieldOperator",
            "MetadataFilterFormFieldOperator": "#/components/schemas/MetadataFilterFormFieldOperator",
            "Folder": "#/components/schemas/Folder",
            "ElectronicDocumentType": "#/components/schemas/ElectronicDocumentType",
            "DocumentObject": "#/components/schemas/DocumentObject",
            "RevisionHistoryItem": "#/components/schemas/RevisionHistoryItem",
            "Baseline": "#/components/schemas/Baseline"
          }
        }
      },
      "BaseObject": {
        "required": ["type"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseItem"
          }
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldValue"
            },
            "description": "The list of field values.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "A list of actions or links that are allowed on the object.",
            "nullable": true
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "A list of messages related to the object. The messages can contain warnings and errors.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Base definition for objects.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "User": "#/components/schemas/User",
            "UserRole": "#/components/schemas/UserRole",
            "UserGroup": "#/components/schemas/UserGroup",
            "Setting": "#/components/schemas/Setting",
            "SearchObject": "#/components/schemas/SearchObject",
            "Publication": "#/components/schemas/Publication",
            "Project": "#/components/schemas/Project",
            "OutputFormat": "#/components/schemas/OutputFormat",
            "EventProgress": "#/components/schemas/EventProgress",
            "RevisionInfo": "#/components/schemas/RevisionInfo",
            "Folder": "#/components/schemas/Folder",
            "ElectronicDocumentType": "#/components/schemas/ElectronicDocumentType",
            "DocumentObject": "#/components/schemas/DocumentObject",
            "RevisionHistoryItem": "#/components/schemas/RevisionHistoryItem",
            "Baseline": "#/components/schemas/Baseline"
          }
        }
      },
      "BaseSearchSortField": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "readOnly": true
          },
          "sortOrder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchSortOrder"
              }
            ],
            "description": "The sort order type."
          }
        },
        "additionalProperties": false,
        "description": "Represents Base Search Sort Fields",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "ScoreSearchSortField": "#/components/schemas/ScoreSearchSortField",
            "SearchSortField": "#/components/schemas/SearchSortField"
          }
        }
      },
      "Baseline": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseObject"
          }
        ],
        "additionalProperties": false,
        "description": "Represents a baseline."
      },
      "BaselineAutoCompleteMode": {
        "enum": ["none", "firstVersion", "latestReleased", "latestAvailable"],
        "type": "string"
      },
      "BaselineEntry": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The unique element name of the card on the logical level"
          },
          "source": {
            "type": "string",
            "description": "Who or what is responsible for the current version number of the object in the baseline."
          },
          "version": {
            "type": "string",
            "description": "The version number of the version card.",
            "nullable": true
          },
          "author": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "description": "The Author of the object.",
            "nullable": true
          },
          "creationDate": {
            "type": "string",
            "description": "The creation date of the object.",
            "format": "date-time",
            "nullable": true
          },
          "modificationDate": {
            "type": "string",
            "description": "The last modification date of the object.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a baseline entry.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "BaselineEntry": "#/components/schemas/BaselineEntry",
            "BaselineReportEntry": "#/components/schemas/BaselineReportEntry"
          }
        }
      },
      "BaselineReportEntry": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaselineEntry"
          }
        ],
        "properties": {
          "versionCardId": {
            "type": "integer",
            "description": "The version of the baseline report entry.",
            "format": "int64",
            "nullable": true
          },
          "documentObjectType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DocumentObjectType"
              }
            ],
            "description": "The document object type of the baseline report entry."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaselineReportItem"
            },
            "description": "The items of the baseline report entry.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a baseline report entry."
      },
      "BaselineReportItem": {
        "type": "object",
        "properties": {
          "reportLanguage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LovValue"
              }
            ],
            "description": "The reporting language of the baseline"
          },
          "reportResolution": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LovValue"
              }
            ],
            "description": "The resolution of the illustration. For non-illustration object, the resolution is an empty string."
          },
          "reportResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaselineReportResult"
              }
            ],
            "description": "The result of the report."
          },
          "languageCardId": {
            "type": "integer",
            "description": "The language card id of the baseline report item.",
            "format": "int64",
            "nullable": true
          },
          "sourceLanguage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LovValue"
              }
            ],
            "description": "Source language of the baseline report item.",
            "nullable": true
          },
          "languages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LovValue"
            },
            "description": "The list of languages of the baseline report item.\r\n<remarks>\r\n    For Topics, this property would contain a single language.\r\n    For Illustrations, it may contain multiple languages.\r\n</remarks>",
            "nullable": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LovValue"
              }
            ],
            "description": "The status of the baseline report item.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The links of the baseline report item.",
            "nullable": true
          },
          "imageLinks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The image links of the baseline report item.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a baseline report item."
      },
      "BaselineReportResult": {
        "enum": [
          "ok",
          "languageVersionMissing",
          "notInUse",
          "notReleased",
          "noValidVersionFound",
          "objectMissing",
          "objectMissingInBaseline",
          "versionMissing"
        ],
        "type": "string",
        "description": "Enumeration holding the possible values for the baseline report result."
      },
      "CancelPublicationPublish": {
        "type": "object",
        "properties": {
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to update the Trisoft.InfoShare.WebApi.V30.Publications.Models.Publication",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an update model for CancelPublicationPublish."
      },
      "CardFieldValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValue"
          }
        ],
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseObject"
              }
            ],
            "description": "Base definition for objects.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CardFilterFieldValue": {
        "required": ["value"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterFieldValue"
          }
        ],
        "properties": {
          "value": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetBaseObject"
            },
            "description": "The filter field value."
          }
        },
        "additionalProperties": false
      },
      "CardLikeFilterFieldValue": {
        "required": ["value"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterFieldValue"
          }
        ],
        "properties": {
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The filter field value."
          }
        },
        "additionalProperties": false
      },
      "CardSearchFieldValue": {
        "required": ["value"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchFieldValue"
          }
        ],
        "properties": {
          "value": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetBaseObject"
            },
            "description": "Collection of values to search for."
          }
        },
        "additionalProperties": false,
        "description": "Represents search field value of type System.Collections.Generic.IList`1."
      },
      "CheckInDocumentObject": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values to be changed."
          },
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to update the Trisoft.InfoShare.WebApi.V30.DocumentObjects.Models.DocumentObject"
          }
        },
        "additionalProperties": false,
        "description": "Request object to check in object content in the repository that match the criteria given in the properties."
      },
      "CheckInDocumentObjectParameters": {
        "required": ["languageCardId"],
        "type": "object",
        "properties": {
          "languageCardId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "The language card identifier of the document object.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to check in the document object specified by the language card identifier."
      },
      "CheckOutDocumentObject": {
        "type": "object",
        "properties": {
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to check out the Trisoft.InfoShare.WebApi.V30.DocumentObjects.Models.DocumentObject"
          }
        },
        "additionalProperties": false,
        "description": "Represents model to check out a document"
      },
      "CheckOutDocumentObjectParameters": {
        "required": ["languageCardId"],
        "type": "object",
        "properties": {
          "languageCardId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "The language card identifier of the document object.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to check out the document object specified by the language card identifier."
      },
      "CompleteBaseline": {
        "type": "object",
        "properties": {
          "extendId": {
            "maxLength": 255,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "Specify the element name of the Baseline that will be used to complete the Baseline.",
            "nullable": true
          },
          "autoCompleteMode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaselineAutoCompleteMode"
              }
            ],
            "description": "Specify the auto complete mode that must be used to select the versions in the Baseline.",
            "default": "none"
          },
          "startLogicalIds": {
            "type": "array",
            "items": {
              "maxLength": 100,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string"
            },
            "description": "Specify a list of logical identifiers of the root map or objects in the outline of the root map that will be used as the starting point for the baseline calculation."
          },
          "startResourceLogicalIds": {
            "type": "array",
            "items": {
              "maxLength": 100,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string"
            },
            "description": "Specify a list of logical identifiers of resources that will be used as the starting point for the Baseline calculation."
          },
          "languages": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "type": "string"
            },
            "description": "Specify a list of languages."
          },
          "illustrationLanguages": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "type": "string"
            },
            "description": "Specify a list of fallback languages for illustrations."
          },
          "resourceLanguages": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "type": "string"
            },
            "description": "Specify a list of fallback languages for resources."
          },
          "resolutions": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "type": "string"
            },
            "description": "Specify a list of resolutions."
          },
          "depth": {
            "type": "integer",
            "description": "Specify how many levels should be returned. If no value is provided all levels will be returned.\r\nNegative Depth means unlimited recursion. Depth 0 means just return the baseline entries for the supplied logical ids.",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false,
        "description": "The model contains the parameters which will be used to expand and complete the baseline starting from the incoming logicalIds using the extend baseline and/or the autocomplete mode."
      },
      "CompleteBaselineParameters": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The identifier of the baseline."
          }
        },
        "additionalProperties": false,
        "description": "The request object to complete baseline that match the criteria given in the properties."
      },
      "CreateBackgroundTask": {
        "required": ["eventType"],
        "type": "object",
        "properties": {
          "eventType": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
            "type": "string",
            "description": "Type of event/background task."
          },
          "progressId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Unique identifier of the event log for this background task. If no progressId is provided, a new event log will be created.",
            "format": "int64",
            "nullable": true
          },
          "eventDescription": {
            "maxLength": 255,
            "type": "string",
            "description": "Description of the background task. This will only be used while creating a new event log.",
            "nullable": true
          },
          "hashId": {
            "maxLength": 80,
            "pattern": "^[a-zA-Z0-9+!:|&=\\\\/#@%?~._-]+$",
            "type": "string",
            "description": "The hashId that will be used to skip older background task for the same action. For instance, synchronizing the same language object only once to SDL LiveContent.",
            "nullable": true
          },
          "startAfter": {
            "type": "string",
            "description": "DateTime in UTC indicating that the background task should not be started before the specified time.\r\n<remarks>If the background task service is still processing other background tasks, the background task will not start at the specified time but later.</remarks>",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the information required for creating background task."
      },
      "CreateBackgroundTaskForDocumentObjectByLanguageCardId": {
        "required": ["eventType", "languageCardIds"],
        "type": "object",
        "properties": {
          "eventType": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
            "type": "string",
            "description": "Specify the type of event to be created."
          },
          "languageCardIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "format": "int64"
            },
            "description": "Language card identifiers of the objects."
          }
        },
        "additionalProperties": false,
        "description": "Request object to create background task for language card identifiers."
      },
      "CreateEvent": {
        "required": ["description", "eventType"],
        "type": "object",
        "properties": {
          "eventType": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
            "type": "string",
            "description": "Type of event you want to log information for."
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "Description of the event."
          },
          "maximumProgress": {
            "minimum": 0,
            "type": "integer",
            "description": "The maximum progress you expect for this type of event.",
            "format": "int32",
            "default": 100
          },
          "parentProgressId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "The identifier of the main event, if the event belongs to a cluster of smaller events.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a create event model."
      },
      "CreateEventDetail": {
        "required": [
          "action",
          "description",
          "eventLevel",
          "progressId",
          "status"
        ],
        "type": "object",
        "properties": {
          "progressId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "The unique identifier of an event.",
            "format": "int64"
          },
          "eventLevel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventLevel"
              }
            ],
            "description": "The event level."
          },
          "action": {
            "minLength": 1,
            "type": "string",
            "description": "The action that is being logged."
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "Description of the action that is being logged."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DetailStatus"
              }
            ],
            "description": "Status of the event detail."
          },
          "dataType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventDataType"
              }
            ],
            "description": "Type of the blob attached to this event detail.",
            "default": "none",
            "nullable": true
          },
          "currentProgress": {
            "minimum": 0,
            "type": "integer",
            "description": "The current position within the progress range.",
            "format": "int32",
            "nullable": true
          },
          "maximumProgress": {
            "minimum": 0,
            "type": "integer",
            "description": "The maximum progress you expect for this type of event.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Create event detail request model."
      },
      "CreateFolder": {
        "required": ["parentId"],
        "type": "object",
        "properties": {
          "parentId": {
            "minLength": 1,
            "type": "string",
            "description": "The identifier of parent folder (e.g. 34567)."
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values."
          }
        },
        "additionalProperties": false,
        "description": "Represents a create folder model."
      },
      "CreateLovValue": {
        "required": ["title"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The lov value identifier",
            "nullable": true
          },
          "title": {
            "minLength": 1,
            "type": "string",
            "description": "The lov value title"
          },
          "description": {
            "type": "string",
            "description": "The lov value description",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a create lov Value model."
      },
      "CreateOutputFormat": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values."
          }
        },
        "additionalProperties": false,
        "description": "Represents a create output format model"
      },
      "CreateProject": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetUser"
            },
            "description": "List with users that should be assigned.",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Specify the fields of the object."
          }
        },
        "additionalProperties": false,
        "description": "Represents a create project model."
      },
      "CreateProjectAssignee": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The project identifier."
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Specify the fields of the assignee."
          }
        },
        "additionalProperties": false,
        "description": "Represents a create project assignee model."
      },
      "CreateStatusDefinition": {
        "required": ["title"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The lov value identifier",
            "nullable": true
          },
          "title": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The lov value title"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "description": "The lov value description",
            "nullable": true
          },
          "statusType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusType"
              }
            ],
            "description": "StatusType: Type of the status described in Trisoft.InfoShare.WebApi.V30.Workflows.Models.CreateStatusDefinition.StatusType.",
            "default": "draft"
          }
        },
        "additionalProperties": false,
        "description": "Represents a model for create status definition."
      },
      "CreateUser": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values."
          }
        },
        "additionalProperties": false,
        "description": "Represents an create user model."
      },
      "CreateUserGroup": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values."
          }
        },
        "additionalProperties": false,
        "description": "Represents a create user group model"
      },
      "CreateUserRole": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values."
          }
        },
        "additionalProperties": false,
        "description": "Represents a create user role model"
      },
      "DateTimeFieldValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValue"
          }
        ],
        "properties": {
          "value": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DateTimeFilterFieldValue": {
        "required": ["value"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterFieldValue"
          }
        ],
        "properties": {
          "value": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The filter field value."
          }
        },
        "additionalProperties": false
      },
      "DateTimeSearchFieldValue": {
        "required": ["value"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchFieldValue"
          }
        ],
        "properties": {
          "value": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Collection of values to search for."
          }
        },
        "additionalProperties": false,
        "description": "Represents search field value of type System.Collections.Generic.IList`1."
      },
      "DeleteDocumentObjectByLanguageCardId": {
        "type": "object",
        "properties": {
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to delete the Trisoft.InfoShare.WebApi.V30.DocumentObjects.Models.DocumentObject"
          }
        },
        "additionalProperties": false,
        "description": "Request object to delete document object."
      },
      "DeleteDocumentObjectByLanguageCardIdParameters": {
        "required": ["languageCardId"],
        "type": "object",
        "properties": {
          "languageCardId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "The language card identifier of the document object.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to delete the document object specified by the language card identifier."
      },
      "DeleteDocumentObjectByLogicalId": {
        "type": "object",
        "properties": {
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to delete the Trisoft.InfoShare.WebApi.V30.DocumentObjects.Models.DocumentObject"
          }
        },
        "additionalProperties": false,
        "description": "Request object to delete document object."
      },
      "DeleteDocumentObjectByLogicalIdParameters": {
        "required": ["logicalId"],
        "type": "object",
        "properties": {
          "logicalId": {
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The logical identifier of the document object."
          },
          "version": {
            "type": "string",
            "description": "The version of the document object.",
            "nullable": true
          },
          "language": {
            "maxLength": 255,
            "type": "string",
            "description": "The language of the document object.",
            "nullable": true
          },
          "resolution": {
            "maxLength": 255,
            "type": "string",
            "description": "The resolution of the document object.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to delete the document object specified by the logical identifier, version, language or resolution."
      },
      "DeleteEvent": {
        "type": "object",
        "properties": {
          "deleteFailedEvents": {
            "type": "boolean",
            "description": "`true` to delete events for which the status is Trisoft.InfoShare.WebApi.V30.Models.Enumerations.ProgressStatus.Failed; otherwise, `false`.",
            "default": false
          },
          "deleteBusyEvents": {
            "type": "boolean",
            "description": "`true` to delete events for which the status is Trisoft.InfoShare.WebApi.V30.Models.Enumerations.ProgressStatus.Busy; otherwise, `false`.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Represents a delete event model."
      },
      "DeleteEventParameters": {
        "required": ["progressId"],
        "type": "object",
        "properties": {
          "progressId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters identifying the event."
      },
      "DeleteMyPreferencesParameters": {
        "required": ["setName"],
        "type": "object",
        "properties": {
          "setName": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
            "type": "string",
            "description": "The name of the preference set to delete."
          },
          "itemName": {
            "maxLength": 255,
            "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
            "type": "string",
            "description": "The name of the preference item to delete.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a delete preference set model for the current user."
      },
      "DeleteOutputFormatParameters": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "Identifier of the output format."
          }
        },
        "additionalProperties": false,
        "description": "Represents the delete output format model."
      },
      "DeletePreferencesParameters": {
        "required": ["id", "setName"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The identifier of the user."
          },
          "setName": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
            "type": "string",
            "description": "The name of the preference set to be deleted."
          },
          "itemName": {
            "maxLength": 255,
            "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
            "type": "string",
            "description": "The item name of the preference item which need to be deleted from the set; if null or empty - the entire set with all the items will be deleted.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The request object to delete user preferences that match the criteria given in the properties."
      },
      "DeleteProject": {
        "type": "object",
        "properties": {
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to delete the Trisoft.InfoShare.WebApi.V30.Projects.Models.Project",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a delete project model."
      },
      "DeleteProjectAssignee": {
        "type": "object",
        "properties": {
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to delete the assignee.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represent delete project's assignee model."
      },
      "DeletePublicationByLanguageCardId": {
        "type": "object",
        "properties": {
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to delete the Trisoft.InfoShare.WebApi.V30.Publications.Models.Publication",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request object to delete publication."
      },
      "DeletePublicationByLogicalId": {
        "type": "object",
        "properties": {
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to delete the Trisoft.InfoShare.WebApi.V30.Publications.Models.Publication",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request object to delete publication."
      },
      "DeleteUserById": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "Identifier of the user."
          }
        },
        "additionalProperties": false,
        "description": "Represents an delete user model."
      },
      "DeleteUserGroupParameters": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "Identifier of the user group."
          }
        },
        "additionalProperties": false,
        "description": "Represents the delete user group model."
      },
      "DeleteUserRoleParameters": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "Identifier of the user role."
          }
        },
        "additionalProperties": false,
        "description": "Represents the delete user role model."
      },
      "DetailStatus": {
        "enum": ["success", "warning", "failed"],
        "type": "string",
        "description": "Indicates the result of an action within an event."
      },
      "DocumentObject": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseObject"
          }
        ],
        "properties": {
          "documentObjectType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DocumentObjectType"
              }
            ],
            "description": "The document object type."
          },
          "languageCardId": {
            "type": "integer",
            "description": "The language card identifier.",
            "format": "int64",
            "nullable": true
          },
          "versionCardId": {
            "type": "integer",
            "description": "The version card identifier.",
            "format": "int64",
            "nullable": true
          },
          "logicalId": {
            "type": "string",
            "description": "The logical identifier."
          },
          "version": {
            "type": "string",
            "description": "The version.",
            "nullable": true
          },
          "languageId": {
            "type": "string",
            "description": "The language identifier.",
            "nullable": true
          },
          "resolutionId": {
            "type": "string",
            "description": "The resolution identifier.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a document."
      },
      "DocumentObjectLink": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RelatedInfo"
          }
        ],
        "properties": {
          "linkType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DocumentObjectLinkType"
              }
            ],
            "description": "The type of the link."
          },
          "target": {
            "type": "string",
            "description": "The reference to the contents that the link targets."
          },
          "endTarget": {
            "type": "string",
            "description": "Reference to the last element in the range when a range of elements inside the contents is referenced.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a link to a node in the contents of a document object."
      },
      "DocumentObjectLinkType": {
        "enum": ["contentReference", "hyperlink", "link", "variable"],
        "type": "string",
        "description": "Defines the type of a link in the contents of a document object."
      },
      "DocumentObjectParseError": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RelatedInfo"
          }
        ],
        "properties": {
          "reason": {
            "type": "string",
            "description": "Message describing the current error.",
            "nullable": true
          },
          "lineNumber": {
            "type": "integer",
            "description": "The line number indicating where the error occurred. Line numbers start at 1.",
            "format": "int32",
            "nullable": true
          },
          "linePosition": {
            "type": "integer",
            "description": "The line position indicating where the error occurred. Line position starts at 1.",
            "format": "int32",
            "nullable": true
          },
          "errorCode": {
            "type": "string",
            "description": "The error code.",
            "nullable": true
          },
          "sourceText": {
            "type": "string",
            "description": "The text of the content that causes the error.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Returns detailed information about a parsing error in the contents of a document object."
      },
      "DocumentObjectType": {
        "enum": [
          "undefined",
          "illustration",
          "library",
          "map",
          "other",
          "topic"
        ],
        "type": "string",
        "description": "Enumeration holding the type of document."
      },
      "DocumentObjectTypeFilter": {
        "enum": ["any", "illustration", "library", "map", "other", "topic"],
        "type": "string",
        "description": "Enumeration holding the type of document for filtering."
      },
      "ElectronicDocumentType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseObject"
          }
        ],
        "additionalProperties": false,
        "description": "Represents a edt."
      },
      "Error": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Message"
          }
        ],
        "additionalProperties": false,
        "description": "An error message."
      },
      "EventDataType": {
        "enum": [
          "none",
          "string",
          "list",
          "xml",
          "sendEventData",
          "logObject",
          "statusReport",
          "commandOutput",
          "ditaotLogFile",
          "other"
        ],
        "type": "string",
        "description": "Indicates the data type of the event data content."
      },
      "EventLevel": {
        "enum": [
          "exception",
          "warning",
          "configuration",
          "information",
          "verbose",
          "debug"
        ],
        "type": "string",
        "description": "Identifies the level of an event detail."
      },
      "EventProgress": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseObject"
          }
        ],
        "properties": {
          "progressId": {
            "type": "integer",
            "description": "The progress id.",
            "format": "int64"
          },
          "detailId": {
            "type": "integer",
            "description": "The detail id.",
            "format": "int64",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "description": "The event id.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an event."
      },
      "ExpandBaseline": {
        "type": "object",
        "properties": {
          "startLogicalIds": {
            "type": "array",
            "items": {
              "maxLength": 100,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string"
            },
            "description": "Specify a list of logical identifiers of the root map or objects in the outline of the root map that will be used as the starting point for the Baseline calculation."
          },
          "startResourceLogicalIds": {
            "type": "array",
            "items": {
              "maxLength": 100,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string"
            },
            "description": "Specify a list of logical identifiers of resources that will be used as the starting point for the Baseline calculation."
          },
          "languages": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "type": "string"
            },
            "description": "Specify a list of languages."
          },
          "illustrationLanguages": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "type": "string"
            },
            "description": "Specify a list of fallback languages for illustrations."
          },
          "resourceLanguages": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "type": "string"
            },
            "description": "Specify a list of fallback languages for resources."
          },
          "resolutions": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "type": "string"
            },
            "description": "Specify a list of resolutions."
          },
          "depth": {
            "type": "integer",
            "description": "Specify how many levels should be returned. If no value is provided all levels will be returned. Valid values are greater than or equal to 1.",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false,
        "description": "Represents a ExpandBaseline."
      },
      "ExpandBaselineParameters": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The identifier of the baseline."
          }
        },
        "additionalProperties": false,
        "description": "The request object to expand baseline report that match the criteria given in the properties."
      },
      "FieldCardReference": {
        "type": "object",
        "properties": {
          "objectType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectType"
              }
            ],
            "description": "Gets the object type."
          },
          "level": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Level"
              }
            ],
            "description": "Gets the InfoShare level of the field."
          }
        },
        "additionalProperties": false,
        "description": "Represents a field card reference."
      },
      "FieldGroup": {
        "enum": ["none", "basic", "descriptive", "system", "all"],
        "type": "string",
        "description": "Groups of metadata fields."
      },
      "FieldSetup": {
        "type": "object",
        "properties": {
          "typeDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeDefinition"
            },
            "description": "Gets a list of type definitions.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a field setup."
      },
      "FieldTag": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TagList"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "Gets or sets the field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          }
        },
        "additionalProperties": false,
        "description": "Represents a tag list with an field."
      },
      "FieldType": {
        "enum": [
          "string",
          "longText",
          "dateTime",
          "number",
          "card",
          "lov",
          "tag",
          "long"
        ],
        "type": "string",
        "description": "Enumeration that lists possible field types."
      },
      "FieldValue": {
        "required": ["type"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RelatedInfo"
          }
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "title": {
            "type": "string",
            "description": "The user-friendly title of the field.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the field.",
            "nullable": true
          },
          "isModified": {
            "type": "boolean",
            "description": "Indicates whether the value has been modified by the metadata\r\nconfiguration since the object was created or its metadata was last set.",
            "nullable": true
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "A list of messages related to the field value.\r\n<remarks>The messages can contain warnings and errors.</remarks>",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a field value that contains information to access a field, and the value associated with the field.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "CardFieldValue": "#/components/schemas/CardFieldValue",
            "DateTimeFieldValue": "#/components/schemas/DateTimeFieldValue",
            "LongFieldValue": "#/components/schemas/LongFieldValue",
            "LovFieldValue": "#/components/schemas/LovFieldValue",
            "MultiCardFieldValue": "#/components/schemas/MultiCardFieldValue",
            "MultiDateTimeFieldValue": "#/components/schemas/MultiDateTimeFieldValue",
            "MultiLovFieldValue": "#/components/schemas/MultiLovFieldValue",
            "MultiNumberFieldValue": "#/components/schemas/MultiNumberFieldValue",
            "MultiStringFieldValue": "#/components/schemas/MultiStringFieldValue",
            "MultiTagFieldValue": "#/components/schemas/MultiTagFieldValue",
            "MultiVersionFieldValue": "#/components/schemas/MultiVersionFieldValue",
            "NumberFieldValue": "#/components/schemas/NumberFieldValue",
            "ObjectFieldValue": "#/components/schemas/ObjectFieldValue",
            "StringFieldValue": "#/components/schemas/StringFieldValue",
            "TagFieldValue": "#/components/schemas/TagFieldValue",
            "VersionFieldValue": "#/components/schemas/VersionFieldValue"
          }
        }
      },
      "FilterFieldValue": {
        "required": ["ishField", "type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the current object.",
            "readOnly": true
          },
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information about the name/label of the field in the Repository (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "operator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataFilterOperator"
              }
            ],
            "description": "The filter operator (e.g. equal, not in, like).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a filter field that contains information to access a field, and the value associated with the field.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "CardFilterFieldValue": "#/components/schemas/CardFilterFieldValue",
            "CardLikeFilterFieldValue": "#/components/schemas/CardLikeFilterFieldValue",
            "DateTimeFilterFieldValue": "#/components/schemas/DateTimeFilterFieldValue",
            "LongFilterFieldValue": "#/components/schemas/LongFilterFieldValue",
            "LovFilterFieldValue": "#/components/schemas/LovFilterFieldValue",
            "LovLikeFilterFieldValue": "#/components/schemas/LovLikeFilterFieldValue",
            "NumberFilterFieldValue": "#/components/schemas/NumberFilterFieldValue",
            "StringFilterFieldValue": "#/components/schemas/StringFilterFieldValue",
            "TagFilterFieldValue": "#/components/schemas/TagFilterFieldValue"
          }
        }
      },
      "Folder": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseObject"
          }
        ],
        "properties": {
          "folderType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FolderType"
              }
            ],
            "description": "The type of the folder (e.g. ReferenceFolder, PublicationFolder, TopicFolder)."
          },
          "baseFolder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseFolder"
              }
            ],
            "description": "The type of the base folder (e.g. Data, System, Favorites, EditorTemplate)."
          }
        },
        "additionalProperties": false,
        "description": "Represents a folder."
      },
      "FolderDescriptor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier (e.g. 34567)."
          },
          "folderType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FolderType"
              }
            ],
            "description": "The type of the folder (e.g. ReferenceFolder, PublicationFolder, TopicFolder)."
          }
        },
        "additionalProperties": false,
        "description": "Represents a folder descriptor model."
      },
      "FolderObjectTypeFilter": {
        "enum": ["any", "contents", "folders"],
        "type": "string",
        "description": "Enumeration that lists possible folder item types."
      },
      "FolderType": {
        "enum": [
          "folder",
          "illustrationFolder",
          "libraryFolder",
          "mapFolder",
          "otherFolder",
          "publicationFolder",
          "referenceFolder",
          "topicFolder"
        ],
        "type": "string",
        "description": "Enumeration holding the type of a folder."
      },
      "FormFieldOperator": {
        "required": ["type"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/LovValue"
          }
        ],
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Represents an operator on a Trisoft.InfoShare.WebApi.V30.Models.Forms.FormField.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "FullTextSearchFormFieldOperator": "#/components/schemas/FullTextSearchFormFieldOperator",
            "MetadataFilterFormFieldOperator": "#/components/schemas/MetadataFilterFormFieldOperator"
          }
        }
      },
      "FullTextSearchFormFieldOperator": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FormFieldOperator"
          }
        ],
        "properties": {
          "operator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FullTextSearchOperator"
              }
            ],
            "description": "Search operator that will be used in search operations.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a full text search operator on a Trisoft.InfoShare.WebApi.V30.Models.Forms.FormField."
      },
      "FullTextSearchOperator": {
        "enum": [
          "equal",
          "notEqual",
          "lessThan",
          "greaterThan",
          "lessThanOrEqual",
          "greaterThanOrEqual",
          "contains"
        ],
        "type": "string",
        "description": "Enumeration holding search operator options."
      },
      "GetBaselineList": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string"
            },
            "description": "List with baselineIds which can be used to limit the result to baselines within this list that match the other filters.\r\nIf not supplied, all the baselines will be returned."
          },
          "activityFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActivityFilter"
              }
            ],
            "description": "Filter of activity that limits the baselines to only the active or inactive ones. If not supplied, all the baselines will be returned.",
            "default": "none"
          },
          "filterFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "description": "The filter fields that contain information to access a field, and the value associated with the field."
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "Specifies one or more metadata fields to return."
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all baselines in the repository that match the criteria given in the properties."
      },
      "GetDocumentObjectByLanguageCardIdParameters": {
        "required": ["languageCardId"],
        "type": "object",
        "properties": {
          "languageCardId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "The language card identifier of the document object.",
            "format": "int64"
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "field": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^(?=.*[a-zA-Z|])[a-zA-Z|0-9.-]*$",
              "type": "string"
            },
            "description": "Specifies one or more metadata fields to return."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to get the metadata of the document object by the language card identifier."
      },
      "GetDocumentObjectByLogicalIdParameters": {
        "required": ["logicalId"],
        "type": "object",
        "properties": {
          "logicalId": {
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The logical identifier of the document object."
          },
          "version": {
            "type": "string",
            "description": "The version of the document object.",
            "nullable": true
          },
          "language": {
            "maxLength": 255,
            "type": "string",
            "description": "The language of the document object.",
            "nullable": true
          },
          "resolution": {
            "maxLength": 255,
            "type": "string",
            "description": "The resolution of the document object.",
            "nullable": true
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "field": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^(?=.*[a-zA-Z|])[a-zA-Z|0-9.-]*$",
              "type": "string"
            },
            "description": "Specifies one or more metadata fields to return."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to get the metadata of the document object specified by the logical identifier, version and language."
      },
      "GetDocumentObjectContentByLanguageCardIdParameters": {
        "required": ["languageCardId"],
        "type": "object",
        "properties": {
          "languageCardId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "The language card identifier of the document object.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to get the content of the document object specified by the language card identifier."
      },
      "GetDocumentObjectList": {
        "type": "object",
        "properties": {
          "objectTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentObjectTypeFilter"
            },
            "description": "Type of the document. If not supplied, all the type of documents will be returned.",
            "default": ["any"]
          },
          "statusFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusFilter"
              }
            ],
            "description": "Filtering on a type of status using status settings.",
            "default": "all"
          },
          "filterFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "description": "The filter fields that contain information to access a field, and the value associated with the field."
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "Specifies one or more metadata fields to return."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all objects in the repository that match the criteria given in the properties."
      },
      "GetDocumentObjectListByLanguageCardId": {
        "required": ["languageCardIds"],
        "type": "object",
        "properties": {
          "objectTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentObjectTypeFilter"
            },
            "description": "Type of the document. If not supplied, all the type of documents will be returned.",
            "default": ["any"]
          },
          "languageCardIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "format": "int64"
            },
            "description": "Language card identifiers of the objects."
          },
          "statusFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusFilter"
              }
            ],
            "description": "Filtering on a type of status using status settings.",
            "default": "all"
          },
          "filterFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "description": "The filter fields that contain information to access a field, and the value associated with the field."
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "Specifies one or more metadata fields to return."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all objects in the repository that match the criteria given in the properties."
      },
      "GetDocumentObjectListByLogicalId": {
        "required": ["logicalIds"],
        "type": "object",
        "properties": {
          "objectTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentObjectTypeFilter"
            },
            "description": "Type of the document. If not supplied, all the type of documents will be returned.",
            "default": ["any"]
          },
          "logicalIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "maxLength": 2048,
              "pattern": "^[a-zA-Z0-9+!:|&=\\\\/#@%?~._-]+$",
              "type": "string"
            },
            "description": "Logical ids of the objects."
          },
          "statusFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusFilter"
              }
            ],
            "description": "Filtering on a type of status using status settings.",
            "default": "all"
          },
          "filterFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "description": "The filter fields that contain information to access a field, and the value associated with the field."
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "Specifies one or more metadata fields to return."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          },
          "includePartialItems": {
            "type": "boolean",
            "description": "<tt>true</tt> to include partial items when the version or language is missing; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all objects in the repository that match the criteria given in the properties."
      },
      "GetDocumentObjectListUsingDocumentObject": {
        "type": "object",
        "properties": {
          "linkType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkType"
              }
            ],
            "description": "The type of the link.",
            "default": "all"
          },
          "objectTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentObjectTypeFilter"
            },
            "description": "Type of the document. If not supplied, all the type of documents will be returned.",
            "default": ["any"]
          },
          "statusFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusFilter"
              }
            ],
            "description": "Filtering on a type of status using status settings.",
            "default": "all"
          },
          "filterFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "description": "The filter fields that contain information to access a field, and the value associated with the field."
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "A collection of requested metadata fields."
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all objects in the repository that are referencing the given logical id."
      },
      "GetDocumentObjectListUsingDocumentObjectParameters": {
        "required": ["logicalId"],
        "type": "object",
        "properties": {
          "logicalId": {
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The logical identifier of the referenced document object."
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to get all document objects in the Repository that are referencing a document object specified by the logical identifier."
      },
      "GetDocumentObjectLocationParameters": {
        "required": ["logicalId"],
        "type": "object",
        "properties": {
          "logicalId": {
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The logical identifier of the document object."
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "field": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^(?=.*[a-zA-Z|])[a-zA-Z|0-9.-]*$",
              "type": "string"
            },
            "description": "Specifies one or more metadata fields to return."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to get the location of the document object specified by the logical identifier in the folder structure."
      },
      "GetDocumentObjectPossibleTargetStatusesByLanguageCardIdParameters": {
        "required": ["languageCardId"],
        "type": "object",
        "properties": {
          "languageCardId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "The language card identifier of the document object.",
            "format": "int64"
          },
          "activityFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActivityFilter"
              }
            ],
            "description": "Filter of activity that limits the possible target statuses to only the active or inactive ones. If not supplied, only the active ones will be returned.",
            "default": "active"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to get the possible target statuses for the document object specified by the language card identifier."
      },
      "GetDocumentObjectReferencesParameters": {
        "required": ["languageCardId"],
        "type": "object",
        "properties": {
          "languageCardId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "The language card identifier of the document object.",
            "format": "int64"
          },
          "linkType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkType"
              }
            ],
            "description": "The enumeration indicating which link fields must be used.",
            "default": "all"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to retrieve the logical identifiers of all document objects referenced by the document object specified by the language card identifier."
      },
      "GetDocumentObjectSmartTagsByLanguageCardId": {
        "type": "object",
        "properties": {
          "fieldTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldTag"
            },
            "description": "Specifies one or more metadata fields to with their current tag values."
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to get smart tags of an object."
      },
      "GetDocumentObjectSmartTagsByLanguageCardIdParameters": {
        "required": ["languageCardId"],
        "type": "object",
        "properties": {
          "languageCardId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "The language card identifier of the document object.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to retrieve smart tags for the document object specified by the language card identifier."
      },
      "GetEventListByParentProgressId": {
        "required": ["parentProgressIds"],
        "type": "object",
        "properties": {
          "parentProgressIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "format": "int64"
            },
            "description": "A list of event identifiers."
          },
          "levelFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventLevel"
              }
            ],
            "description": "The enumeration value that specifies the event level at which to retrieve event actions/details.",
            "default": "information"
          },
          "lastDetailId": {
            "type": "integer",
            "description": "Identifier of the last event action/detail that was retrieved during a previous attempt.",
            "format": "int64",
            "nullable": true
          },
          "filterFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "description": "The filter fields that contain information to access a field, and the value associated with the field."
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "FieldGroup allows to add a group of fields to the requested metadata.",
            "default": "none"
          },
          "requestedMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "The requested metadata."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all objects in the repository that match the criteria given in the properties."
      },
      "GetEventListByProgressId": {
        "required": ["progressIds"],
        "type": "object",
        "properties": {
          "progressIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "format": "int64"
            },
            "description": "A list of event identifiers."
          },
          "levelFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventLevel"
              }
            ],
            "description": "The enumeration value that specifies the event level at which to retrieve event actions/details.",
            "default": "information"
          },
          "lastDetailId": {
            "type": "integer",
            "description": "Identifier of the last event action/detail that was retrieved during a previous attempt.",
            "format": "int64",
            "nullable": true
          },
          "filterFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "description": "The filter fields that contain information to access a field, and the value associated with the field."
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "FieldGroup allows to add a group of fields to the requested metadata.",
            "default": "none"
          },
          "requestedMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "The requested metadata."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all objects in the repository that match the criteria given in the properties."
      },
      "GetEventOverview": {
        "type": "object",
        "properties": {
          "eventTypes": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
              "type": "string"
            },
            "description": "A list of strings containing the event types to retrieve."
          },
          "statusFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProgressStatusFilter"
              }
            ],
            "description": "The enumeration value limiting the events that will be retrieved based on the status of the events.",
            "default": "busy"
          },
          "modifiedSince": {
            "type": "string",
            "description": "A System.DateTime limiting the events that will be retrieved based on the last modification date of the events.",
            "format": "date-time",
            "nullable": true
          },
          "userFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserFilter"
              }
            ],
            "description": "The enumeration value limiting the events that will be retrieved based on the user associated with the events.",
            "default": "all"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "FieldGroup allows to add a group of fields to the requested metadata.",
            "default": "none"
          },
          "requestedMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "The requested metadata."
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all objects in the repository that match the criteria given in the properties."
      },
      "GetEventOverviewByProgressId": {
        "required": ["progressIds"],
        "type": "object",
        "properties": {
          "progressIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "format": "int64"
            },
            "description": "A list of event identifiers."
          },
          "statusFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProgressStatusFilter"
              }
            ],
            "description": "The enumeration value limiting the events that will be retrieved based on the status of the events.",
            "default": "busy"
          },
          "modifiedSince": {
            "type": "string",
            "description": "A System.DateTime limiting the events that will be retrieved based on the last modification date of the events.",
            "format": "date-time",
            "nullable": true
          },
          "userFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserFilter"
              }
            ],
            "description": "The enumeration value limiting the events that will be retrieved based on the user associated with the events.",
            "default": "all"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "FieldGroup allows to add a group of fields to the requested metadata.",
            "default": "none"
          },
          "requestedMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "The requested metadata."
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all objects in the repository that match the criteria given in the properties."
      },
      "GetFolderByFolderPathParameters": {
        "required": ["path"],
        "type": "object",
        "properties": {
          "path": {
            "minLength": 1,
            "type": "string",
            "description": "The path of the folder."
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^(?=.*[a-zA-Z|])[a-zA-Z|0-9.-]*$",
              "type": "string"
            },
            "description": "A collection of requested metadata fields."
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all objects in the repository that match the criteria given in the properties."
      },
      "GetFolderList": {
        "required": ["ids"],
        "type": "object",
        "properties": {
          "ids": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List with folderIds which can be used to limit the result to folders within this list that match the other filters."
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "Specifies one or more metadata fields to return.",
            "nullable": true
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request folder to get all folders in the repository that match the criteria given in the properties."
      },
      "GetInboxObjectList": {
        "type": "object",
        "properties": {
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "Specifies one or more metadata fields to return.",
            "nullable": true
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Represents an Inbox object list."
      },
      "GetLovList": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The identifiers of list of values",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a get Lov list model."
      },
      "GetMetadataBindingSmartTags": {
        "required": ["contentLanguage"],
        "type": "object",
        "properties": {
          "fieldTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldTag"
            },
            "description": "Specifies one or more metadata fields to with their current tag values."
          },
          "contentLanguage": {
            "minLength": 1,
            "type": "string",
            "description": "Specifies the language of the content."
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to get smart tags of given content."
      },
      "GetMetadataBindingTagList": {
        "type": "object",
        "properties": {
          "inputFilter": {
            "type": "string",
            "description": "String used to filter the possible tags.",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Specify some fields of the object which might impact the possible tags.\r\nFor instance FTESTCOUNTRIES with value \"Netherlands\" will limit the result to \"Amsterdam\"",
            "nullable": true
          },
          "maxTagsToReturn": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Maximum number of tags that should be returned.",
            "format": "int64",
            "default": 20
          }
        },
        "additionalProperties": false,
        "description": "Request object to get metadata bound tags that match the criteria given in the properties."
      },
      "GetMetadataBindingTagStructure": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Specify some fields of the object which might impact the possible tags structure.\r\nFor instance FTESTCOUNTRIES with value \"Netherlands\" will limit the result to \"Amsterdam\"",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request object to get metadata bound tags structure that match the criteria given in the properties."
      },
      "GetMyPreferencesParameters": {
        "required": ["setName"],
        "type": "object",
        "properties": {
          "setName": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
            "type": "string",
            "description": "The name of the preference set to be retrieved, if the set name can not be found empty preference set is returned."
          }
        },
        "additionalProperties": false,
        "description": "The request object to get current user preferences that match the criteria given in the properties."
      },
      "GetMyUserParameters": {
        "type": "object",
        "properties": {
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "field": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^(?=.*[a-zA-Z|])[a-zA-Z|0-9.-]*$",
              "type": "string"
            },
            "description": "Specifies one or more metadata fields to return."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>."
          }
        },
        "additionalProperties": false,
        "description": "The request object to get a current user in the repository that match the criteria given in the properties."
      },
      "GetOutputFormatList": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string"
            },
            "description": "List with outputFormatIds which can be used to limit the result to output formats within this list that match the other filters.\r\nIf not supplied, all the output formats will be returned."
          },
          "activityFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActivityFilter"
              }
            ],
            "description": "Filter of activity that limits the output formats to only the active or inactive ones. If not supplied, all the output formats will be returned.",
            "default": "none"
          },
          "filterFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "description": "The filter fields that contain information to access a field, and the value associated with the field."
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "Specifies one or more metadata fields to return."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all output formats in the repository that match the criteria given in the properties."
      },
      "GetOutputFormatParameters": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "Identifier of the output format."
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "field": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^(?=.*[a-zA-Z|])[a-zA-Z|0-9.-]*$",
              "type": "string"
            },
            "description": "Specifies one or more metadata fields to return."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get output format in the repository that match the criteria given in the properties."
      },
      "GetPreferencesParameters": {
        "required": ["id", "setName"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The identifier of the user."
          },
          "setName": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
            "type": "string",
            "description": "The name of the preference set to be retrieved, if the set name can not be found empty preference set is returned."
          }
        },
        "additionalProperties": false,
        "description": "The request object to get user preferences that match the criteria given in the properties."
      },
      "GetProjectList": {
        "type": "object",
        "properties": {
          "filterFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "description": "The filter fields that contain information to access a field, and the value associated with the field.",
            "nullable": true
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "Specify one or more metadata fields to return.",
            "nullable": true
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Represents a get project list model."
      },
      "GetProjectListByProjectId": {
        "required": ["projectIds"],
        "type": "object",
        "properties": {
          "projectIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string"
            },
            "description": "Logical ids of the projects."
          },
          "filterFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "description": "The filter fields that contain information to access a field, and the value associated with the field.",
            "nullable": true
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "Specify one or more metadata fields to return.",
            "nullable": true
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all objects in the repository that match the criteria given in the properties."
      },
      "GetPublicationList": {
        "type": "object",
        "properties": {
          "statusFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusFilter"
              }
            ],
            "description": "Filtering on a type of status using status settings.",
            "default": "all"
          },
          "filterFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "description": "The filter fields that contain information to access a field, and the value associated with the field.",
            "nullable": true
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "Specifies one or more metadata fields to return.",
            "nullable": true
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all objects in the repository that match the criteria given in the properties."
      },
      "GetPublicationListByLanguageCardId": {
        "required": ["languageCardIds"],
        "type": "object",
        "properties": {
          "languageCardIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer",
              "format": "int64"
            },
            "description": "Logical ids of the objects."
          },
          "statusFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusFilter"
              }
            ],
            "description": "Filtering on a type of status using status settings.",
            "default": "all"
          },
          "filterFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "description": "The filter fields that contain information to access a field, and the value associated with the field.",
            "nullable": true
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "Specifies one or more metadata fields to return.",
            "nullable": true
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all publications in the repository that match the criteria given in the properties."
      },
      "GetPublicationListByLogicalId": {
        "required": ["logicalIds"],
        "type": "object",
        "properties": {
          "logicalIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Logical ids of the objects."
          },
          "statusFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusFilter"
              }
            ],
            "description": "Filtering on a type of status using status settings.",
            "default": "all"
          },
          "filterFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "description": "The filter fields that contain information to access a field, and the value associated with the field.",
            "nullable": true
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "Specifies one or more metadata fields to return.",
            "nullable": true
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          },
          "includePartialItems": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the partial items; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all publications in the repository that match the criteria given in the properties."
      },
      "GetPublicationListUsingDocumentObject": {
        "type": "object",
        "properties": {
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "A collection of requested metadata fields."
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request body to get all publications in the Repository that are referencing a document object specified by the logical identifier and version."
      },
      "GetPublicationListUsingDocumentObjectParameters": {
        "required": ["logicalId", "version"],
        "type": "object",
        "properties": {
          "logicalId": {
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The logical identifier of the referenced document object."
          },
          "version": {
            "minLength": 1,
            "type": "string",
            "description": "The version of the referenced document object."
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to get all publications in the Repository that are referencing a document object specified by the logical identifier and version."
      },
      "GetSettingsParameters": {
        "type": "object",
        "properties": {
          "field": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^(?=.*[a-zA-Z|])[a-zA-Z|0-9.-]*$",
              "type": "string"
            },
            "description": "Specifies one or more metadata fields to return."
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          }
        },
        "additionalProperties": false,
        "description": "Request object to get settings in the repository that match the criteria given in the properties."
      },
      "GetTranslationStatusListParameters": {
        "required": ["documentObjectType"],
        "type": "object",
        "properties": {
          "documentObjectType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DocumentObjectType"
              }
            ],
            "description": "The document object type to retrieve translation statuses for.\r\n<remarks><value>Undefined</value> is not supported for this parameter.\r\n</remarks>"
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all objects in the repository that match the criteria given in the properties."
      },
      "GetUserGroupList": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string"
            },
            "description": "List with userGroupIds which can be used to limit the result to user groups within this list that match the other filters.\r\nIf not supplied, all the user groups will be returned."
          },
          "activityFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActivityFilter"
              }
            ],
            "description": "Filter of activity that limits the user groups to only the active or inactive ones. If not supplied, all the user groups will be returned.",
            "default": "none"
          },
          "filterFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "description": "The filter fields that contain information to access a field, and the value associated with the field."
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "Specifies one or more metadata fields to return."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all user groups in the repository that match the criteria given in the properties."
      },
      "GetUserGroupParameters": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "Identifier of the group."
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "field": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^(?=.*[a-zA-Z|])[a-zA-Z|0-9.-]*$",
              "type": "string"
            },
            "description": "Specifies one or more metadata fields to return."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get user group in the repository that match the criteria given in the properties."
      },
      "GetUserList": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string"
            },
            "description": "List with userIds which can be used to limit the result to users within this list that match the other filters.\r\nIf not supplied, all the users will be returned."
          },
          "activityFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActivityFilter"
              }
            ],
            "description": "Filter of activity that limits the users to only the active or inactive ones. If not supplied, all the users will be returned.",
            "default": "none"
          },
          "filterFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "description": "The filter fields that contain information to access a field, and the value associated with the field."
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "Specifies one or more metadata fields to return."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all users in the repository that match the criteria given in the properties."
      },
      "GetUserParameters": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The identifier of the user."
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "field": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^(?=.*[a-zA-Z|])[a-zA-Z|0-9.-]*$",
              "type": "string"
            },
            "description": "Specifies one or more metadata fields to return."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "The request object to get a user in the repository that match the criteria given in the properties."
      },
      "GetUserRoleList": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
              "type": "string"
            },
            "description": "List with userRoleIds which can be used to limit the result to user roles within this list that match the other filters.\r\nIf not supplied, all the user roles will be returned."
          },
          "activityFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActivityFilter"
              }
            ],
            "description": "Filter of activity that limits the user roles to only the active or inactive ones. If not supplied, all the user roles will be returned.",
            "default": "none"
          },
          "filterFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterFieldValue"
            },
            "description": "The filter fields that contain information to access a field, and the value associated with the field."
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedField"
            },
            "description": "Specifies one or more metadata fields to return."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get all user roles in the repository that match the criteria given in the properties."
      },
      "GetUserRoleParameters": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "Identifier of the role."
          },
          "selectedProperties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelectedProperties"
              }
            ],
            "description": "Specifies the properties that will be returned. If not supplied, only the identifier will be returned.",
            "default": "id"
          },
          "fieldGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldGroup"
              }
            ],
            "description": "Group of metadata fields that will be returned. If not supplied, no fields will be returned.",
            "default": "none"
          },
          "field": {
            "type": "array",
            "items": {
              "maxLength": 255,
              "pattern": "^(?=.*[a-zA-Z|])[a-zA-Z|0-9.-]*$",
              "type": "string"
            },
            "description": "Specifies one or more metadata fields to return."
          },
          "includeLinks": {
            "type": "boolean",
            "description": "<tt>true</tt> to include the links; otherwise, <tt>false</tt>. Default is <tt>false</tt>.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Request object to get user role in the repository that match the criteria given in the properties."
      },
      "GroupSearchExpression": {
        "required": ["type"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchExpression"
          }
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "expressions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchExpression"
            },
            "description": "Collection of search expressions."
          }
        },
        "additionalProperties": false,
        "description": "Represents a search expression group.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AndSearchExpression": "#/components/schemas/AndSearchExpression",
            "OrSearchExpression": "#/components/schemas/OrSearchExpression"
          }
        }
      },
      "Inbox": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the inbox definition."
          },
          "id": {
            "type": "string",
            "description": "The id of the inbox definition."
          },
          "toStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToStatus"
            },
            "description": "The list of to-statuses.",
            "nullable": true
          },
          "documentObjectTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentObjectType"
            },
            "description": "Gets or sets document object types list for the inbox definition.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an Inbox definition."
      },
      "InfoShareProblemDetails": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetails"
          }
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "description": "The event identifier specific to this occurrence of the problem..",
            "format": "int32"
          },
          "eventName": {
            "type": "string",
            "description": "The even name specific to this occurrence of the problem.",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "description": "A list of errors related to this occurrence of the problem.",
            "nullable": true
          },
          "relatedInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedInfo"
            },
            "description": "A list of additional information related to this occurrence of the problem.",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "IshField": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The name/label of the InfoShare field (e.g. FTITLE)."
          },
          "level": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Level"
              }
            ],
            "description": "The level of the InfoShare field (e.g. logical, version, language).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a field that contains information to access a field."
      },
      "Level": {
        "enum": [
          "none",
          "annotation",
          "compute",
          "data",
          "eventProgressDetail",
          "language",
          "logical",
          "object",
          "eventProgress",
          "project",
          "projectAssignee",
          "reply",
          "version"
        ],
        "type": "string",
        "description": "Enumeration holding the visible InfoShare hierarchy levels."
      },
      "Link": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "Gets or sets the URL for this Trisoft.Utilities.WebApi.Links.Link.",
            "nullable": true
          },
          "rel": {
            "type": "string",
            "description": "Gets or sets the relation for this Trisoft.Utilities.WebApi.Links.Link.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Gets or sets the HTTP method for this Trisoft.Utilities.WebApi.Links.Link.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a HATEOAS link model."
      },
      "LinkType": {
        "enum": ["contentLink", "hyperLink", "all"],
        "type": "string",
        "description": "Indicates which link fields must be used in the GetParents/GetChildren methods."
      },
      "LongFieldValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValue"
          }
        ],
        "properties": {
          "value": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LongFilterFieldValue": {
        "required": ["value"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterFieldValue"
          }
        ],
        "properties": {
          "value": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The filter field value."
          }
        },
        "additionalProperties": false
      },
      "LovFieldValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValue"
          }
        ],
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LovValue"
              }
            ],
            "description": "Represents an item in a value list.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LovFilterFieldValue": {
        "required": ["value"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterFieldValue"
          }
        ],
        "properties": {
          "value": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetLovValue"
            },
            "description": "The filter field value."
          }
        },
        "additionalProperties": false
      },
      "LovLikeFilterFieldValue": {
        "required": ["value"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterFieldValue"
          }
        ],
        "properties": {
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The filter field value."
          }
        },
        "additionalProperties": false
      },
      "LovList": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseItem"
          }
        ],
        "additionalProperties": false,
        "description": "Represents an item in a list of list of values."
      },
      "LovSearchFieldValue": {
        "required": ["value"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchFieldValue"
          }
        ],
        "properties": {
          "value": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetLovValue"
            },
            "description": "Collection of values to search for."
          }
        },
        "additionalProperties": false,
        "description": "Represents search field value of type System.Collections.Generic.IList`1."
      },
      "LovValue": {
        "required": ["type"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseItem"
          }
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "active": {
            "type": "boolean",
            "description": "The active value.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an item in a value list.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "LovValue": "#/components/schemas/LovValue",
            "FormFieldOperator": "#/components/schemas/FormFieldOperator",
            "FullTextSearchFormFieldOperator": "#/components/schemas/FullTextSearchFormFieldOperator",
            "MetadataFilterFormFieldOperator": "#/components/schemas/MetadataFilterFormFieldOperator"
          }
        }
      },
      "Message": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the current object.",
            "nullable": true,
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "A short, human-readable summary of the event message.",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "description": "A human-readable explanation specific to this occurrence of the event message.",
            "nullable": true
          },
          "severity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SeverityLevel"
              }
            ],
            "description": "The severity level of the event message."
          },
          "eventId": {
            "type": "integer",
            "description": "The identifier of the corresponding event.",
            "format": "int32",
            "nullable": true
          },
          "eventName": {
            "type": "string",
            "description": "The name of the corresponding event.",
            "nullable": true
          },
          "logId": {
            "type": "integer",
            "description": "The identifier of the corresponding entry in the log.",
            "format": "int64",
            "nullable": true
          },
          "relatedInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedInfo"
            },
            "description": "A list of additional information related to this occurrence of the event message.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An event message.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Message": "#/components/schemas/Message",
            "Error": "#/components/schemas/Error"
          }
        }
      },
      "MetadataFilterFormFieldOperator": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FormFieldOperator"
          }
        ],
        "properties": {
          "operator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataFilterOperator"
              }
            ],
            "description": "Search operator that will be used in search operations.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a metadata filter operator on a Trisoft.InfoShare.WebApi.V30.Models.Forms.FormField."
      },
      "MetadataFilterOperator": {
        "enum": [
          "equal",
          "notEqual",
          "in",
          "notIn",
          "like",
          "greaterThan",
          "lessThan",
          "greaterThanOrEqual",
          "lessThanOrEqual",
          "between",
          "empty",
          "notEmpty",
          "ciLike"
        ],
        "type": "string",
        "description": "Specifies the possible filter operators that can be used by `FilterFieldValue`."
      },
      "MoveFolder": {
        "type": "object",
        "properties": {
          "folderId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "The card id of the folder that should be moved.",
            "format": "int64"
          },
          "destinationId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "The card id of the destination folder.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Represents a move folder model."
      },
      "MoveObject": {
        "required": ["logicalId"],
        "type": "object",
        "properties": {
          "logicalId": {
            "minLength": 1,
            "type": "string",
            "description": "The logical identifier of the object that should be moved."
          },
          "destinationId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "The card identifier of the destination folder.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Represents a move object model."
      },
      "MultiCardFieldValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValue"
          }
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseObject"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MultiDateTimeFieldValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValue"
          }
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MultiLovFieldValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValue"
          }
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LovValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MultiNumberFieldValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValue"
          }
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MultiStringFieldValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValue"
          }
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MultiTagFieldValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValue"
          }
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MultiVersionFieldValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValue"
          }
        ],
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NextStatus": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LovValue"
              }
            ],
            "description": "The value of the next status element in the report configuration XML."
          }
        },
        "additionalProperties": false,
        "description": "Represents next status element in the report configuration XML."
      },
      "NumberFieldValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValue"
          }
        ],
        "properties": {
          "value": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NumberFilterFieldValue": {
        "required": ["value"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterFieldValue"
          }
        ],
        "properties": {
          "value": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "The filter field value."
          }
        },
        "additionalProperties": false
      },
      "NumberSearchFieldValue": {
        "required": ["value"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchFieldValue"
          }
        ],
        "properties": {
          "value": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "Collection of values to search for."
          }
        },
        "additionalProperties": false,
        "description": "Represents search field value of type System.Collections.Generic.IList`1."
      },
      "ObjectFieldValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValue"
          }
        ],
        "properties": {
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ObjectType": {
        "enum": [
          "annotation",
          "baseline",
          "backgroundTask",
          "configuration",
          "electronicDocumentType",
          "eventProgress",
          "folder",
          "illustration",
          "library",
          "map",
          "other",
          "outputFormat",
          "project",
          "publication",
          "topic",
          "translationJob",
          "user",
          "userGroup",
          "userRole"
        ],
        "type": "string",
        "description": "Enumeration holding the type of object."
      },
      "OrSearchExpression": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GroupSearchExpression"
          }
        ],
        "additionalProperties": false,
        "description": "Represents collection of search expression to be evaluated with OR logical operator."
      },
      "OutputFormat": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseObject"
          }
        ],
        "additionalProperties": false,
        "description": "Represents a output format."
      },
      "PreferenceItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the preference item."
          },
          "value": {
            "type": "string",
            "description": "The value of the  preference item.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents user preference item"
      },
      "PreferenceSet": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The Name of the preference set"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PreferenceItem"
            },
            "description": "The list of Trisoft.InfoShare.WebApi.V30.Users.Models.PreferenceItem contained in the Preference set",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents user preference set"
      },
      "ProblemDetails": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {},
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "ProblemDetails": "#/components/schemas/ProblemDetails",
            "InfoShareProblemDetails": "#/components/schemas/InfoShareProblemDetails"
          }
        }
      },
      "ProgressStatus": {
        "enum": ["busy", "success", "warning", "failed", "calculate"],
        "type": "string",
        "description": "The Trisoft.InfoShare.WebApi.V30.Models.Enumerations.ProgressStatus indicates the status of an event."
      },
      "ProgressStatusFilter": {
        "enum": ["busy", "success", "warning", "failed", "all"],
        "type": "string",
        "description": "Used to specify which events should be retrieved by the event monitor."
      },
      "Project": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseObject"
          }
        ],
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The element name of the project."
          },
          "assigneeCardId": {
            "type": "integer",
            "description": "The CardId of the Assignee (if available).",
            "format": "int64",
            "nullable": true
          },
          "publicationTitle": {
            "type": "string",
            "description": "The title of the publication.",
            "nullable": true
          },
          "publicationVersion": {
            "type": "string",
            "description": "The version number of the publication version.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a project."
      },
      "Publication": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseObject"
          }
        ],
        "properties": {
          "versionCardId": {
            "type": "integer",
            "description": "The version card identifier.",
            "format": "int64",
            "nullable": true
          },
          "languageCardId": {
            "type": "integer",
            "description": "The language card identifier.",
            "format": "int64",
            "nullable": true
          },
          "logicalId": {
            "type": "string",
            "description": "The logical identifier."
          },
          "version": {
            "type": "string",
            "description": "The version.",
            "nullable": true
          },
          "outputFormatId": {
            "type": "string",
            "description": "The output format identifier.",
            "nullable": true
          },
          "languageCombinationIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The language identifier combination.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a publication."
      },
      "PublishPublication": {
        "type": "object",
        "properties": {
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to publish the Trisoft.InfoShare.WebApi.V30.Publications.Models.Publication.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a publish model for publication."
      },
      "RelatedInfo": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the current object.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "A list of additional information.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "User": "#/components/schemas/User",
            "UserRole": "#/components/schemas/UserRole",
            "UserGroup": "#/components/schemas/UserGroup",
            "Setting": "#/components/schemas/Setting",
            "SearchObject": "#/components/schemas/SearchObject",
            "Publication": "#/components/schemas/Publication",
            "Project": "#/components/schemas/Project",
            "OutputFormat": "#/components/schemas/OutputFormat",
            "BaseItem": "#/components/schemas/BaseItem",
            "BaseObject": "#/components/schemas/BaseObject",
            "EventProgress": "#/components/schemas/EventProgress",
            "LovList": "#/components/schemas/LovList",
            "LovValue": "#/components/schemas/LovValue",
            "RevisionInfo": "#/components/schemas/RevisionInfo",
            "Tag": "#/components/schemas/Tag",
            "FormFieldOperator": "#/components/schemas/FormFieldOperator",
            "FullTextSearchFormFieldOperator": "#/components/schemas/FullTextSearchFormFieldOperator",
            "MetadataFilterFormFieldOperator": "#/components/schemas/MetadataFilterFormFieldOperator",
            "FieldValue": "#/components/schemas/FieldValue",
            "CardFieldValue": "#/components/schemas/CardFieldValue",
            "DateTimeFieldValue": "#/components/schemas/DateTimeFieldValue",
            "LongFieldValue": "#/components/schemas/LongFieldValue",
            "LovFieldValue": "#/components/schemas/LovFieldValue",
            "MultiCardFieldValue": "#/components/schemas/MultiCardFieldValue",
            "MultiDateTimeFieldValue": "#/components/schemas/MultiDateTimeFieldValue",
            "MultiLovFieldValue": "#/components/schemas/MultiLovFieldValue",
            "MultiNumberFieldValue": "#/components/schemas/MultiNumberFieldValue",
            "MultiStringFieldValue": "#/components/schemas/MultiStringFieldValue",
            "MultiTagFieldValue": "#/components/schemas/MultiTagFieldValue",
            "MultiVersionFieldValue": "#/components/schemas/MultiVersionFieldValue",
            "NumberFieldValue": "#/components/schemas/NumberFieldValue",
            "ObjectFieldValue": "#/components/schemas/ObjectFieldValue",
            "StringFieldValue": "#/components/schemas/StringFieldValue",
            "TagFieldValue": "#/components/schemas/TagFieldValue",
            "VersionFieldValue": "#/components/schemas/VersionFieldValue",
            "Folder": "#/components/schemas/Folder",
            "ElectronicDocumentType": "#/components/schemas/ElectronicDocumentType",
            "DocumentObject": "#/components/schemas/DocumentObject",
            "DocumentObjectLink": "#/components/schemas/DocumentObjectLink",
            "DocumentObjectParseError": "#/components/schemas/DocumentObjectParseError",
            "RevisionHistoryItem": "#/components/schemas/RevisionHistoryItem",
            "Baseline": "#/components/schemas/Baseline",
            "SchemaValidationError": "#/components/schemas/SchemaValidationError"
          }
        }
      },
      "ReleasePublication": {
        "type": "object",
        "properties": {
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Fields that will be used in concurrency check.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a release model for publication."
      },
      "RemoveShortcut": {
        "required": ["logicalId"],
        "type": "object",
        "properties": {
          "logicalId": {
            "minLength": 1,
            "type": "string",
            "description": "Specify logical identifier of the document object or publication for which to remove a shortcut."
          }
        },
        "additionalProperties": false,
        "description": "Represents logical identifier model."
      },
      "ReportSettings": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "baselineResolutions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LovValue"
            },
            "description": "List of baseline resolution in the report configuration XML.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the report configuration.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "TranslationReportSettings": "#/components/schemas/TranslationReportSettings",
            "WorkflowReportSettings": "#/components/schemas/WorkflowReportSettings"
          }
        }
      },
      "RequestedField": {
        "required": ["ishField"],
        "type": "object",
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information about the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          }
        },
        "additionalProperties": false,
        "description": "Represents a requested metadata field."
      },
      "RevisionHistoryItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseObject"
          }
        ],
        "properties": {
          "sequence": {
            "type": "integer",
            "description": "The sequence number of a revision history item.",
            "format": "int64"
          },
          "modifiedOn": {
            "type": "string",
            "description": "The datetime of the modification on the document object.",
            "format": "date-time"
          },
          "modifiedBy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "description": "The user who modified the document object."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LovValue"
              }
            ],
            "description": "The status of the document object.",
            "nullable": true
          },
          "isRemoved": {
            "type": "boolean",
            "description": "Indicates whether the revision is removed from the Repository."
          }
        },
        "additionalProperties": false,
        "description": "Represents a revision history item."
      },
      "RevisionInfo": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseObject"
          }
        ],
        "additionalProperties": false,
        "description": "Represents a revision info."
      },
      "SchemaValidationError": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RelatedInfo"
          }
        ],
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the schema where validation failed.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Class representing a schema validation error."
      },
      "ScoreSearchSortField": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseSearchSortField"
          }
        ],
        "additionalProperties": false,
        "description": "Represents a search order criteria based on SolrLucene  score."
      },
      "SearchExpression": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents base search expressions.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AndSearchExpression": "#/components/schemas/AndSearchExpression",
            "AnywhereSearchFieldValue": "#/components/schemas/AnywhereSearchFieldValue",
            "CardSearchFieldValue": "#/components/schemas/CardSearchFieldValue",
            "DateTimeSearchFieldValue": "#/components/schemas/DateTimeSearchFieldValue",
            "GroupSearchExpression": "#/components/schemas/GroupSearchExpression",
            "LovSearchFieldValue": "#/components/schemas/LovSearchFieldValue",
            "NumberSearchFieldValue": "#/components/schemas/NumberSearchFieldValue",
            "OrSearchExpression": "#/components/schemas/OrSearchExpression",
            "SearchFieldValue": "#/components/schemas/SearchFieldValue",
            "StringSearchFieldValue": "#/components/schemas/StringSearchFieldValue"
          }
        }
      },
      "SearchFieldValue": {
        "required": ["type"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchExpression"
          }
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "fullTextSearchOperator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FullTextSearchOperator"
              }
            ],
            "description": "The search operator."
          },
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The search field."
          }
        },
        "additionalProperties": false,
        "description": "Represents a search field value.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "CardSearchFieldValue": "#/components/schemas/CardSearchFieldValue",
            "DateTimeSearchFieldValue": "#/components/schemas/DateTimeSearchFieldValue",
            "LovSearchFieldValue": "#/components/schemas/LovSearchFieldValue",
            "NumberSearchFieldValue": "#/components/schemas/NumberSearchFieldValue",
            "StringSearchFieldValue": "#/components/schemas/StringSearchFieldValue"
          }
        }
      },
      "SearchObject": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseObject"
          }
        ],
        "additionalProperties": false,
        "description": "Represents a search object."
      },
      "SearchObjectTypeFilter": {
        "enum": ["any", "illustration", "library", "map", "other", "topic"],
        "type": "string",
        "description": "Enumeration holding search object type options."
      },
      "SearchRequest": {
        "type": "object",
        "properties": {
          "expression": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupSearchExpression"
              }
            ],
            "description": "Search expressions group.\r\nUse Trisoft.InfoShare.WebApi.V30.Search.Models.AnywhereSearchFieldValue for filtering anywhere."
          },
          "sortFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseSearchSortField"
            },
            "description": "Represents list of fields to be used to sort the search result.\r\nUse Trisoft.InfoShare.WebApi.V30.Search.Models.ScoreSearchSortField for sorting on the SolrLucene score. Trisoft.InfoShare.WebApi.V30.Search.Models.ScoreSearchSortField sort fields are used for SolrLucene by default.",
            "nullable": true
          },
          "versionFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchVersionFilter"
              }
            ],
            "description": "Search version filter options."
          },
          "objectTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchObjectTypeFilter"
            },
            "description": "Search object type filter."
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The languages list to be be included in the search result.",
            "nullable": true
          },
          "resolutions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The resolutions list to be be included in the search result.",
            "nullable": true
          },
          "sizeLimit": {
            "type": "integer",
            "description": "The maximum number of objects to return.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents search request criteria to find document objects."
      },
      "SearchResponse": {
        "type": "object",
        "properties": {
          "totalHitsFound": {
            "type": "integer",
            "description": "The total number of hits for the current search.",
            "format": "int64"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResultEntry"
            },
            "description": "Collection of search result entries."
          }
        },
        "additionalProperties": false,
        "description": "Represents the search response."
      },
      "SearchResultEntry": {
        "type": "object",
        "properties": {
          "documentObjectType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DocumentObjectType"
              }
            ],
            "description": "The document object type."
          },
          "logicalId": {
            "type": "string",
            "description": "The document object logical id."
          },
          "versionCardId": {
            "type": "integer",
            "description": "The document object version card id.",
            "format": "int64"
          },
          "languageCardId": {
            "type": "integer",
            "description": "The document object language card id.",
            "format": "int64"
          },
          "sequence": {
            "type": "integer",
            "description": "The search result entry sort sequence.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a search result entry."
      },
      "SearchSortField": {
        "required": ["ishField"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseSearchSortField"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The sorting field."
          }
        },
        "additionalProperties": false,
        "description": "Represents a search order criteria."
      },
      "SearchSortOrder": {
        "enum": ["ascending", "descending"],
        "type": "string",
        "description": "Enumeration holding search sort order options."
      },
      "SearchVersionFilter": {
        "enum": ["latest", "all"],
        "type": "string",
        "description": "Enumeration holding search version filter options."
      },
      "SelectedProperties": {
        "enum": ["id", "titleAndDescription"],
        "type": "string",
        "description": "Enumeration holding the selected properties."
      },
      "SetBaseObject": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the current object.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an object.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "SetUser": "#/components/schemas/SetUser",
            "SetUserRole": "#/components/schemas/SetUserRole",
            "SetUserGroup": "#/components/schemas/SetUserGroup",
            "SetSetting": "#/components/schemas/SetSetting",
            "SetPublication": "#/components/schemas/SetPublication",
            "SetOutputFormat": "#/components/schemas/SetOutputFormat",
            "SetManagedObject": "#/components/schemas/SetManagedObject",
            "SetFolder": "#/components/schemas/SetFolder",
            "SetElectronicDocumentType": "#/components/schemas/SetElectronicDocumentType",
            "SetDocumentObject": "#/components/schemas/SetDocumentObject",
            "SetBaseline": "#/components/schemas/SetBaseline"
          }
        }
      },
      "SetBaseline": {
        "required": ["id"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetBaseObject"
          }
        ],
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The identifier."
          }
        },
        "additionalProperties": false,
        "description": "Represents a baseline."
      },
      "SetCardFieldValue": {
        "required": ["ishField"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetFieldValue"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SetBaseObject"
              }
            ],
            "description": "The field value.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetDateTimeFieldValue": {
        "required": ["ishField"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetFieldValue"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "value": {
            "type": "string",
            "description": "The field value.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetDocumentObject": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetManagedObject"
          }
        ],
        "additionalProperties": false,
        "description": "Represents a document.\r\n<remarks>\"SetDocumentObject\" must be identified by only one identifier either \"LogicalId\", \"VersionCardId\" or \"LanguageCardId\". </remarks>"
      },
      "SetElectronicDocumentType": {
        "required": ["id"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetBaseObject"
          }
        ],
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The identifier."
          }
        },
        "additionalProperties": false,
        "description": "Represents a edt."
      },
      "SetFieldTag": {
        "required": ["ishField"],
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetTag"
            },
            "description": "The list of tags."
          },
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          }
        },
        "additionalProperties": false,
        "description": "Represents a field tag that contains information to access a field, and the tags associated with the field."
      },
      "SetFieldValue": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the current object.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a field value that contains information to access a field, and the value associated with the field.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "SetCardFieldValue": "#/components/schemas/SetCardFieldValue",
            "SetDateTimeFieldValue": "#/components/schemas/SetDateTimeFieldValue",
            "SetLovFieldValue": "#/components/schemas/SetLovFieldValue",
            "SetMultiCardFieldValue": "#/components/schemas/SetMultiCardFieldValue",
            "SetMultiDateTimeFieldValue": "#/components/schemas/SetMultiDateTimeFieldValue",
            "SetMultiLovFieldValue": "#/components/schemas/SetMultiLovFieldValue",
            "SetMultiNumberFieldValue": "#/components/schemas/SetMultiNumberFieldValue",
            "SetMultiStringFieldValue": "#/components/schemas/SetMultiStringFieldValue",
            "SetMultiTagFieldValue": "#/components/schemas/SetMultiTagFieldValue",
            "SetMultiVersionFieldValue": "#/components/schemas/SetMultiVersionFieldValue",
            "SetNumberFieldValue": "#/components/schemas/SetNumberFieldValue",
            "SetObjectFieldValue": "#/components/schemas/SetObjectFieldValue",
            "SetStringFieldValue": "#/components/schemas/SetStringFieldValue",
            "SetTagFieldValue": "#/components/schemas/SetTagFieldValue",
            "SetVersionFieldValue": "#/components/schemas/SetVersionFieldValue"
          }
        }
      },
      "SetFolder": {
        "required": ["id"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetBaseObject"
          }
        ],
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string",
            "description": "The identifier."
          }
        },
        "additionalProperties": false,
        "description": "Represents a folder."
      },
      "SetLovFieldValue": {
        "required": ["ishField"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetFieldValue"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SetLovValue"
              }
            ],
            "description": "The field value.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetLovValue": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The identifier."
          }
        },
        "additionalProperties": false,
        "description": "Represents a settable item in a value list."
      },
      "SetManagedObject": {
        "required": ["type"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetBaseObject"
          }
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "languageCardId": {
            "type": "integer",
            "description": "The language card identifier.",
            "format": "int64",
            "nullable": true
          },
          "versionCardId": {
            "type": "integer",
            "description": "The version card identifier.",
            "format": "int64",
            "nullable": true
          },
          "logicalId": {
            "type": "string",
            "description": "The logical identifier.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an object to set a Document object or Publication.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "SetPublication": "#/components/schemas/SetPublication",
            "SetDocumentObject": "#/components/schemas/SetDocumentObject"
          }
        }
      },
      "SetMultiCardFieldValue": {
        "required": ["ishField"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetFieldValue"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetBaseObject"
            },
            "description": "The field value."
          }
        },
        "additionalProperties": false
      },
      "SetMultiDateTimeFieldValue": {
        "required": ["ishField"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetFieldValue"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The field value."
          }
        },
        "additionalProperties": false
      },
      "SetMultiLovFieldValue": {
        "required": ["ishField"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetFieldValue"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetLovValue"
            },
            "description": "The field value."
          }
        },
        "additionalProperties": false
      },
      "SetMultiNumberFieldValue": {
        "required": ["ishField"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetFieldValue"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "value": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "The field value."
          }
        },
        "additionalProperties": false
      },
      "SetMultiStringFieldValue": {
        "required": ["ishField"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetFieldValue"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The field value."
          }
        },
        "additionalProperties": false
      },
      "SetMultiTagFieldValue": {
        "required": ["ishField"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetFieldValue"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetTag"
            },
            "description": "The field value."
          }
        },
        "additionalProperties": false
      },
      "SetMultiVersionFieldValue": {
        "required": ["ishField"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetFieldValue"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The field value."
          }
        },
        "additionalProperties": false
      },
      "SetMyPreferencesParameters": {
        "required": ["setName"],
        "type": "object",
        "properties": {
          "setName": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
            "type": "string",
            "description": "The name of the preference set to be updated."
          }
        },
        "additionalProperties": false,
        "description": "The request object to set current user preferences that match the criteria given in the properties."
      },
      "SetNumberFieldValue": {
        "required": ["ishField"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetFieldValue"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "value": {
            "type": "number",
            "description": "The field value.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetObjectFieldValue": {
        "required": ["ishField"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetFieldValue"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "value": {
            "description": "The field value.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetOutputFormat": {
        "required": ["id"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetBaseObject"
          }
        ],
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The identifier."
          }
        },
        "additionalProperties": false,
        "description": "Represents an OutputFormat."
      },
      "SetPreferenceItem": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
            "type": "string",
            "description": "The name of the preference item."
          },
          "value": {
            "type": "string",
            "description": "The value of the  preference item.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents user preference item."
      },
      "SetPreferencesParameters": {
        "required": ["id", "setName"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The identifier of the user."
          },
          "setName": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9._-]*$",
            "type": "string",
            "description": "The name of the preference set to be updated."
          }
        },
        "additionalProperties": false,
        "description": "The request object to set user preferences that match the criteria given in the properties."
      },
      "SetPublication": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetManagedObject"
          }
        ],
        "additionalProperties": false,
        "description": "Represents a publication.\r\n<remarks>\"SetPublication\" must be identified by only one identifier either \"LogicalId\", \"VersionCardId\" or \"LanguageCardId\". </remarks>"
      },
      "SetSetting": {
        "required": ["id"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetBaseObject"
          }
        ],
        "properties": {
          "id": {
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The identifier."
          }
        },
        "additionalProperties": false,
        "description": "Represents a setting."
      },
      "SetStringFieldValue": {
        "required": ["ishField"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetFieldValue"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "value": {
            "type": "string",
            "description": "The field value.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetTag": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9+!:|&=\\\\/#@%?~._-]+$",
            "type": "string",
            "description": "The identifier."
          }
        },
        "additionalProperties": false,
        "description": "Represents a tag."
      },
      "SetTagFieldValue": {
        "required": ["ishField"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetFieldValue"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SetTag"
              }
            ],
            "description": "The field value.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetUser": {
        "required": ["id"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetBaseObject"
          }
        ],
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The identifier."
          }
        },
        "additionalProperties": false,
        "description": "Represents a user."
      },
      "SetUserGroup": {
        "required": ["id"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetBaseObject"
          }
        ],
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The identifier."
          }
        },
        "additionalProperties": false,
        "description": "Represents a user group."
      },
      "SetUserRole": {
        "required": ["id"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetBaseObject"
          }
        ],
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The identifier."
          }
        },
        "additionalProperties": false,
        "description": "Represents a user role."
      },
      "SetVersionFieldValue": {
        "required": ["ishField"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetFieldValue"
          }
        ],
        "properties": {
          "ishField": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IshField"
              }
            ],
            "description": "The field with information the name/label of the InfoShare field (e.g. FTITLE) and the level of the InfoShare field (e.g. logical, version, lng)."
          },
          "value": {
            "type": "string",
            "description": "The field value.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Setting": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseObject"
          }
        ],
        "additionalProperties": false,
        "description": "Represents a setting."
      },
      "SettingsFieldDefinition": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets the element name of the field (e.g. CREATED-ON)",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Gets the label of the field (e.g. Creation date)",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets the description of the field (e.g. \"Used on all cards to indicate the date that the object was created\")",
            "nullable": true
          },
          "fieldType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldType"
              }
            ],
            "description": "Gets the type of the field"
          },
          "level": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Level"
              }
            ],
            "description": "Gets the InfoShare level of the field"
          },
          "isMandatory": {
            "type": "boolean",
            "description": "Is the field mandatory or not?"
          },
          "isMultiValue": {
            "type": "boolean",
            "description": "Is the field multi value or not?"
          },
          "allowOnRead": {
            "type": "boolean",
            "description": "Can the field be requested during a \"Read\" action (GetMetadata, RetrieveMetadata, Find,...)?"
          },
          "allowOnCreate": {
            "type": "boolean",
            "description": "Can the field be set via the metadata during a \"Create\" action?"
          },
          "allowOnUpdate": {
            "type": "boolean",
            "description": "Can the field be updated via the metadata during a \"Update\" action (Update, SetMetadata,...)?"
          },
          "allowOnSearch": {
            "type": "boolean",
            "description": "Can the field be requested during a search?"
          },
          "allowOnSmartTagging": {
            "type": "boolean",
            "description": "Can the field be requested during a \"SmartTagging\" action (GetMetadata, RetrieveMetadata, Find,...)?"
          },
          "isSystem": {
            "type": "boolean",
            "description": "Is the field a system field or not?"
          },
          "isBasic": {
            "type": "boolean",
            "description": "Is the field a basic field (e.g. DOC-LANGUAGE) or not (e.g. FISHLINKS)?"
          },
          "isDescriptive": {
            "type": "boolean",
            "description": "Is this field necessary for full describing the object?"
          },
          "dataSource": {
            "type": "string",
            "description": "Gets the data source of the Tag type field.",
            "nullable": true
          },
          "lovReference": {
            "type": "string",
            "description": "Gets the reference of the Lov type field.",
            "nullable": true
          },
          "cardReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldCardReference"
            },
            "description": "Gets the references of the Card type field.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a settings field definition."
      },
      "SeverityLevel": {
        "enum": ["error", "warning", "message", "info"],
        "type": "string",
        "description": "List of Severity Levels"
      },
      "Status": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LovValue"
              }
            ],
            "description": "The value of the status element in the report configuration XML."
          },
          "nextStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NextStatus"
            },
            "description": "List of the possible next statuses.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents status element in the report configuration XML."
      },
      "StatusDefinition": {
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LovValue"
              }
            ],
            "description": "Status: A Trisoft.InfoShare.WebApi.V30.Models.LovValue describing the status value of the definition."
          },
          "statusType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusType"
              }
            ],
            "description": "StatusType: Type of the status described in Trisoft.InfoShare.WebApi.V30.Workflows.Models.StatusDefinition.Status."
          }
        },
        "additionalProperties": false,
        "description": "Represents an item in a value list."
      },
      "StatusFilter": {
        "enum": [
          "all",
          "latestReleased",
          "draftOrLatestReleased",
          "allReleased"
        ],
        "type": "string",
        "description": "Allows explicit filtering on the language level status field.\r\n<remarks>\r\nDepending on which status filter is specified, the objects with following status types can be returned:\r\n<table class=\"table\"><thead><tr><th>Status filter</th><th>Returned status types</th></tr></thead><tbody><tr><td>All</td><td>All status types</td></tr><tr><td>LatestReleased</td><td>Latest released excluding out-of-date</td></tr><tr><td>DraftOrLatestReleased</td><td>Draft and latest released excluding out-of-date</td></tr><tr><td>AllReleased</td><td>All released including out-of-date</td></tr></tbody></table></remarks>"
      },
      "StatusGroup": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The status group title."
          },
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Status"
            },
            "description": "List of the possible statuses."
          }
        },
        "additionalProperties": false,
        "description": "Represents status group element in the report configuration XML."
      },
      "StatusStatistics": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "sourceLanguageStatusGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusGroup"
            },
            "description": "The source language list of status groups."
          }
        },
        "additionalProperties": false,
        "description": "Represents statistics element in the report configuration XML.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "StatusStatistics": "#/components/schemas/StatusStatistics",
            "TranslationStatusStatistics": "#/components/schemas/TranslationStatusStatistics"
          }
        }
      },
      "StatusType": {
        "enum": ["draft", "released"],
        "type": "string",
        "description": "Enumeration with the possible status types"
      },
      "StringFieldValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValue"
          }
        ],
        "properties": {
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringFilterFieldValue": {
        "required": ["value"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterFieldValue"
          }
        ],
        "properties": {
          "value": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The filter field value."
          }
        },
        "additionalProperties": false
      },
      "StringSearchFieldValue": {
        "required": ["value"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchFieldValue"
          }
        ],
        "properties": {
          "value": {
            "minItems": 1,
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "string"
            },
            "description": "Collection of values to search for."
          }
        },
        "additionalProperties": false,
        "description": "Represents search field value of type System.Collections.Generic.IList`1."
      },
      "Tag": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseItem"
          }
        ],
        "properties": {
          "annotatedTitle": {
            "type": "string",
            "description": "The annotated title of the tag.\r\nThe value is an HTML string containing the title and &lt;em&gt; elements to mark the input filter, e.g. &lt;em&gt;soft&lt;/em&gt; & hard.",
            "nullable": true
          },
          "isSelectable": {
            "type": "boolean",
            "description": "A value that indicates whether the tag can be selected."
          },
          "isValid": {
            "type": "boolean",
            "description": "A value that indicates whether the tag is valid."
          }
        },
        "additionalProperties": false,
        "description": "Represents a tag."
      },
      "TagFieldValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValue"
          }
        ],
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tag"
              }
            ],
            "description": "Represents a tag.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TagFilterFieldValue": {
        "required": ["value"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterFieldValue"
          }
        ],
        "properties": {
          "value": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetTag"
            },
            "description": "The filter field value."
          }
        },
        "additionalProperties": false
      },
      "TagList": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "The list of tags."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "The list of messages.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a list with tags.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "TagList": "#/components/schemas/TagList",
            "FieldTag": "#/components/schemas/FieldTag"
          }
        }
      },
      "TagRelation": {
        "type": "object",
        "properties": {
          "fromId": {
            "type": "string",
            "description": "The from tag id. If this property is null or System.String.Empty, it indicates that this term appears as a root in the tree.",
            "nullable": true
          },
          "toId": {
            "type": "string",
            "description": "The to tag id."
          }
        },
        "additionalProperties": false,
        "description": "Represents a tag relation."
      },
      "TagStructure": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "The list of tags."
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRelation"
            },
            "description": "The list of tag relations."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "The list of messages.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a tags structure."
      },
      "TerminateEvent": {
        "required": ["status"],
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProgressStatus"
              }
            ],
            "description": "Final status of the event.\r\n<remarks>Busy status is not allowed.</remarks>"
          },
          "currentProgress": {
            "minimum": 0,
            "type": "integer",
            "description": "The current position within the progress range.",
            "format": "int32",
            "nullable": true
          },
          "maximumProgress": {
            "minimum": 0,
            "type": "integer",
            "description": "The maximum progress you expect for this type of event.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a terminate event model."
      },
      "TerminateEventParameters": {
        "required": ["progressId"],
        "type": "object",
        "properties": {
          "progressId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters identifying the terminate event."
      },
      "ToStatus": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "The Label of the ToStatus."
          },
          "lovValue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LovValue"
              }
            ],
            "description": "The LovValue."
          }
        },
        "additionalProperties": false,
        "description": "Represents a ToStatus."
      },
      "TranslationReportSettings": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportSettings"
          }
        ],
        "properties": {
          "statistics": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TranslationStatusStatistics"
              }
            ],
            "description": "Represents status statistic configuration."
          }
        },
        "additionalProperties": false,
        "description": "Represents the translation report configuration."
      },
      "TranslationStatus": {
        "type": "object",
        "properties": {
          "translationStatusType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TranslationStatusType"
              }
            ],
            "description": "Represents the type of the translation status."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LovValue"
              }
            ],
            "description": "The Lov status."
          }
        },
        "additionalProperties": false,
        "description": "Represents translation status."
      },
      "TranslationStatusStatistics": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/StatusStatistics"
          }
        ],
        "properties": {
          "targetLanguageStatusGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusGroup"
            },
            "description": "The target language list of status groups."
          }
        },
        "additionalProperties": false,
        "description": "Represents statistics element in the report configuration XML."
      },
      "TranslationStatusType": {
        "enum": [
          "initial",
          "inTranslation",
          "translationInReview",
          "translationApproved",
          "translationRejected"
        ],
        "type": "string",
        "description": "Enumeration that lists possible translation status types."
      },
      "TypeDefinition": {
        "type": "object",
        "properties": {
          "objectType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectType"
              }
            ],
            "description": "Gets the object type."
          },
          "fieldDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettingsFieldDefinition"
            },
            "description": "Gets the list of field definitions.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a type definition."
      },
      "UndoCheckoutDocumentObject": {
        "type": "object",
        "properties": {
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to undo checkout the Trisoft.InfoShare.WebApi.V30.DocumentObjects.Models.DocumentObject"
          }
        },
        "additionalProperties": false,
        "description": "Represents model to undo checkout of a document"
      },
      "UndoCheckoutDocumentObjectParameters": {
        "required": ["languageCardId"],
        "type": "object",
        "properties": {
          "languageCardId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "The language card identifier of the document object.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to undo the checkout of the document object specified by the language card identifier."
      },
      "UnpublishPublication": {
        "type": "object",
        "properties": {
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to publish the Trisoft.InfoShare.WebApi.V30.Publications.Models.Publication.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an unpublish model for publication."
      },
      "UnreleasePublication": {
        "type": "object",
        "properties": {
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Fields that will be used in concurrency check.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model representing parameters for unreleasing a publication"
      },
      "UpdateDocumentObject": {
        "required": ["fields"],
        "type": "object",
        "properties": {
          "fields": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values to be changed."
          },
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to update the Trisoft.InfoShare.WebApi.V30.DocumentObjects.Models.DocumentObject"
          }
        },
        "additionalProperties": false,
        "description": "Represents a document."
      },
      "UpdateDocumentObjectByLanguageCardIdParameters": {
        "required": ["languageCardId"],
        "type": "object",
        "properties": {
          "languageCardId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "The language card identifier of the document object.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to update the document object specified by the language card identifier."
      },
      "UpdateDocumentObjectByLogicalIdParameters": {
        "required": ["logicalId"],
        "type": "object",
        "properties": {
          "logicalId": {
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The logical identifier of the document object."
          },
          "version": {
            "type": "string",
            "description": "The version of the document object.",
            "nullable": true
          },
          "language": {
            "maxLength": 255,
            "type": "string",
            "description": "The language of the document object.",
            "nullable": true
          },
          "resolution": {
            "maxLength": 255,
            "type": "string",
            "description": "The resolution of the document object.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request parameters to update the document object specified by the logical identifier, version, language and resolution."
      },
      "UpdateDocumentObjectContent": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values to be changed."
          },
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to update the Trisoft.InfoShare.WebApi.V30.DocumentObjects.Models.DocumentObject"
          }
        },
        "additionalProperties": false,
        "description": "Request object to update object content in the repository that match the criteria given in the properties."
      },
      "UpdateFolder": {
        "required": ["fields"],
        "type": "object",
        "properties": {
          "fields": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values."
          }
        },
        "additionalProperties": false,
        "description": "Represents an update folder model."
      },
      "UpdateLovValue": {
        "required": ["description", "title"],
        "type": "object",
        "properties": {
          "title": {
            "minLength": 1,
            "type": "string",
            "description": "The lov value title"
          },
          "description": {
            "type": "string",
            "description": "The lov value description"
          },
          "active": {
            "type": "boolean",
            "description": "The lov value active status"
          }
        },
        "additionalProperties": false,
        "description": "Represents an update lov Value model."
      },
      "UpdateOutputFormat": {
        "required": ["fields"],
        "type": "object",
        "properties": {
          "fields": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values."
          }
        },
        "additionalProperties": false,
        "description": "Represents an update output format model"
      },
      "UpdateOutputFormatParameters": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "Identifier of the output format."
          }
        },
        "additionalProperties": false,
        "description": "Represents an update output format model"
      },
      "UpdatePreferenceSet": {
        "required": ["items"],
        "type": "object",
        "properties": {
          "items": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetPreferenceItem"
            },
            "description": "The list of preference items."
          }
        },
        "additionalProperties": false,
        "description": "Represents an update current user preference set model."
      },
      "UpdateProject": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values to be changed."
          },
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to update the Trisoft.InfoShare.WebApi.V30.Projects.Models.Project",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an update project model."
      },
      "UpdateProjectAssignee": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values to be changed."
          },
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to update the assignee.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represent update project's assignee model."
      },
      "UpdatePublication": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values to be changed."
          },
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to update the Trisoft.InfoShare.WebApi.V30.Publications.Models.Publication",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an update model for publication."
      },
      "UpdateSettings": {
        "required": ["fields"],
        "type": "object",
        "properties": {
          "fields": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values to be updated."
          },
          "requiredCurrentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "Fields that will be used in concurrency check.\r\nEach individual field in this collection should have the same exact value in the database in order to update the Trisoft.InfoShare.WebApi.V30.Settings.Models.Setting"
          }
        },
        "additionalProperties": false,
        "description": "Represents an update settings model."
      },
      "UpdateStatusDefinition": {
        "required": ["active", "description", "title"],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The status definition title"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "description": "The status definition description"
          },
          "active": {
            "type": "boolean",
            "description": "The status definition active status"
          }
        },
        "additionalProperties": false,
        "description": "Represents an update status definition model."
      },
      "UpdateUser": {
        "required": ["fields"],
        "type": "object",
        "properties": {
          "fields": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values."
          }
        },
        "additionalProperties": false,
        "description": "Represents an update user model."
      },
      "UpdateUserGroup": {
        "required": ["fields"],
        "type": "object",
        "properties": {
          "fields": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values."
          }
        },
        "additionalProperties": false,
        "description": "Represents an update user group model"
      },
      "UpdateUserGroupParameters": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "Identifier of the group."
          }
        },
        "additionalProperties": false,
        "description": "Represents an update user group model"
      },
      "UpdateUserParameters": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "The identifier of the user."
          }
        },
        "additionalProperties": false,
        "description": "The request object to update a user that match the criteria given in the properties."
      },
      "UpdateUserRole": {
        "required": ["fields"],
        "type": "object",
        "properties": {
          "fields": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetFieldValue"
            },
            "description": "The list of field values."
          }
        },
        "additionalProperties": false,
        "description": "Represents an update user role model"
      },
      "UpdateUserRoleParameters": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^(?=.*[a-zA-Z])[a-zA-Z0-9.-]*$",
            "type": "string",
            "description": "Identifier of the role."
          }
        },
        "additionalProperties": false,
        "description": "Represents an update user role model"
      },
      "User": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseObject"
          }
        ],
        "additionalProperties": false,
        "description": "Represents a user."
      },
      "UserFilter": {
        "enum": ["all", "current"],
        "type": "string",
        "description": "Enumeration holding the possible filters on a user column/field"
      },
      "UserGroup": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseObject"
          }
        ],
        "additionalProperties": false,
        "description": "Represents a user group."
      },
      "UserRole": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseObject"
          }
        ],
        "additionalProperties": false,
        "description": "Represents a user role."
      },
      "VersionFieldValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValue"
          }
        ],
        "properties": {
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkflowReportSettings": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportSettings"
          }
        ],
        "properties": {
          "statistics": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusStatistics"
              }
            ],
            "description": "Represents status statistic configuration."
          }
        },
        "additionalProperties": false,
        "description": "Represents the workflow report configuration."
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Enter an access token (jwt+at).",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
